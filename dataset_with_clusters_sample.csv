Index,Document ID,Page Content,Entities,High Confidence Entities,Entities_String,Cluster
0,0.0,"Create an Endpoint

After your first login, you will be directed to the [Endpoint creation page](https://ui.endpoints.huggingface.co/new). As an example, this guide will go through the steps to deploy [distilbert-base-uncased-finetuned-sst-2-english](https://huggingface.co/distilbert-base-uncased-finetuned-sst-2-english) for text classification. 

## 1. Enter the Hugging Face Repository ID and your desired endpoint name:

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_repository.png"" alt=""select repository"" />

## 2. Select your Cloud Provider and region. Initially, only AWS will be available as a Cloud Provider with the `us-east-1` and `eu-west-1` regions. We will add Azure soon, and if you need to test Endpoints with other Cloud Providers or regions, please let us know.

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_region.png"" alt=""select region"" />","[{'entity_group': 'ORG', 'score': 0.6232752, 'word': 'gith', 'start': 448, 'end': 452}, {'entity_group': 'ORG', 'score': 0.684777, 'word': '##usercon', 'start': 454, 'end': 461}, {'entity_group': 'ORG', 'score': 0.7737491, 'word': '##t', 'start': 464, 'end': 465}, {'entity_group': 'ORG', 'score': 0.9964876, 'word': 'AWS', 'start': 628, 'end': 631}, {'entity_group': 'ORG', 'score': 0.98491263, 'word': 'Azure', 'start': 728, 'end': 733}, {'entity_group': 'ORG', 'score': 0.564591, 'word': '##con', 'start': 866, 'end': 869}, {'entity_group': 'ORG', 'score': 0.5923701, 'word': '##t', 'start': 872, 'end': 873}]","[{'entity_group': 'ORG', 'score': 0.9964876, 'word': 'AWS', 'start': 628, 'end': 631}, {'entity_group': 'ORG', 'score': 0.98491263, 'word': 'Azure', 'start': 728, 'end': 733}]",gith ##usercon ##t AWS Azure ##con ##t,1
1,0.0,"## 3. Define the [Security Level](security) for the Endpoint:

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_security.png"" alt=""define security"" />

## 4. Create your Endpoint by clicking **Create Endpoint**. By default, your Endpoint is created with a medium CPU (2 x 4GB vCPUs with Intel Xeon Ice Lake) The cost estimate assumes the Endpoint will be up for an entire month, and does not take autoscaling into account.

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_create_cost.png"" alt=""create endpoint"" />

## 5. Wait for the Endpoint to build, initialize and run which can take between 1 to 5 minutes.

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/overview.png"" alt=""overview"" />

## 6. Test your Endpoint in the overview with the Inference widget üèÅ üéâ!","[{'entity_group': 'MISC', 'score': 0.51924074, 'word': 'End', 'start': 52, 'end': 55}, {'entity_group': 'ORG', 'score': 0.746636, 'word': 'githubusercontent', 'start': 85, 'end': 102}, {'entity_group': 'MISC', 'score': 0.94735086, 'word': 'Intel Xeon Ice Lake', 'start': 335, 'end': 354}, {'entity_group': 'ORG', 'score': 0.73827696, 'word': 'githubusercontent', 'start': 494, 'end': 511}, {'entity_group': 'MISC', 'score': 0.54780966, 'word': 'End', 'start': 631, 'end': 634}, {'entity_group': 'ORG', 'score': 0.7573484, 'word': 'githubusercontent', 'start': 731, 'end': 748}]","[{'entity_group': 'MISC', 'score': 0.94735086, 'word': 'Intel Xeon Ice Lake', 'start': 335, 'end': 354}]",End githubusercontent Intel Xeon Ice Lake githubusercontent End githubusercontent,1
2,0.0,"## 6. Test your Endpoint in the overview with the Inference widget üèÅ üéâ!

<img src=""https://raw.githubusercontent.com/huggingface/hf-endpoints-documentation/main/assets/1_inference.png"" alt=""run inference"" />","[{'entity_group': 'ORG', 'score': 0.6025768, 'word': '##con', 'start': 105, 'end': 108}]",[],##con,1
3,1.0,"Choosing a metric for your task

**So you've trained your model and want to see how well it‚Äôs doing on a dataset of your choice. Where do you start?**

There is no ‚Äúone size fits all‚Äù approach to choosing an evaluation metric, but some good guidelines to keep in mind are:

## Categories of metrics

There are 3 high-level categories of metrics:",[],[],,1
4,1.0,"## Categories of metrics

There are 3 high-level categories of metrics:

1. *Generic metrics*, which can be applied to a variety of situations and datasets, such as precision and accuracy.
2. *Task-specific metrics*, which are limited to a given task, such as Machine Translation (often evaluated using metrics [BLEU](https://huggingface.co/metrics/bleu) or [ROUGE](https://huggingface.co/metrics/rouge)) or Named Entity Recognition (often evaluated with [seqeval](https://huggingface.co/metrics/seqeval)).
3. *Dataset-specific metrics*, which aim to measure model performance on specific benchmarks: for instance, the [GLUE benchmark](https://huggingface.co/datasets/glue) has a dedicated [evaluation metric](https://huggingface.co/metrics/glue).

Let's look at each of these three cases:

### Generic metrics

Many of the metrics used in the Machine Learning community are quite generic and can be applied in a variety of tasks and datasets.","[{'entity_group': 'MISC', 'score': 0.7729468, 'word': 'G', 'start': 620, 'end': 621}, {'entity_group': 'ORG', 'score': 0.6026392, 'word': 'Machine Learning', 'start': 844, 'end': 860}]",[],G Machine Learning,1
5,1.0,"This is the case for metrics like [accuracy](https://huggingface.co/metrics/accuracy) and [precision](https://huggingface.co/metrics/precision), which can be used for evaluating labeled (supervised) datasets, as well as [perplexity](https://huggingface.co/metrics/perplexity), which can be used for evaluating different kinds of (unsupervised) generative tasks.

To see the input structure of a given metric, you can look at its metric card. For example, in the case of [precision](https://huggingface.co/metrics/precision), the format is:",[],[],,1
6,1.0,"```
>>> precision_metric = evaluate.load(""precision"")
>>> results = precision_metric.compute(references=[0, 1], predictions=[0, 1])
>>> print(results)
{'precision': 1.0}",[],[],,1
7,1.0,"```

### Task-specific metrics

Popular ML tasks like Machine Translation and Named Entity Recognition have specific metrics that can be used to compare models. For example, a series of different metrics have been proposed for text generation, ranging from [BLEU](https://huggingface.co/metrics/bleu) and its derivatives such as [GoogleBLEU](https://huggingface.co/metrics/google_bleu) and [GLEU](https://huggingface.co/metrics/gleu), but also [ROUGE](https://huggingface.co/metrics/rouge), [MAUVE](https://huggingface.co/metrics/mauve), etc.

You can find the right metric for your task by:","[{'entity_group': 'MISC', 'score': 0.6010696, 'word': 'Machine', 'start': 54, 'end': 61}, {'entity_group': 'MISC', 'score': 0.6835079, 'word': 'Named En', 'start': 78, 'end': 86}, {'entity_group': 'MISC', 'score': 0.70589584, 'word': 'Recognition', 'start': 91, 'end': 102}, {'entity_group': 'ORG', 'score': 0.63802916, 'word': 'B', 'start': 258, 'end': 259}, {'entity_group': 'ORG', 'score': 0.785588, 'word': 'GoogleBLEU', 'start': 330, 'end': 340}, {'entity_group': 'ORG', 'score': 0.67980015, 'word': 'GLE', 'start': 391, 'end': 394}, {'entity_group': 'ORG', 'score': 0.47504696, 'word': 'R', 'start': 445, 'end': 446}]",[],Machine Named En Recognition B GoogleBLEU GLE R,1
8,1.0,"You can find the right metric for your task by:

- **Looking at the [Task pages](https://huggingface.co/tasks)** to see what metrics can be used for evaluating models for a given task.
- **Checking out leaderboards** on sites like [Papers With Code](https://paperswithcode.com/) (you can search by task and by dataset).
-  **Reading the metric cards** for the relevant metrics and see which ones are a good fit for your use case. For example, see the [BLEU metric card](https://github.com/huggingface/evaluate/tree/main/metrics/bleu) or [SQuaD metric card](https://github.com/huggingface/evaluate/tree/main/metrics/squad).
- **Looking at papers and blog posts** published on the topic and see what metrics they report. This can change over time, so try to pick papers from the last couple of years!

### Dataset-specific metrics","[{'entity_group': 'ORG', 'score': 0.64762205, 'word': 'Papers With Code', 'start': 232, 'end': 248}, {'entity_group': 'ORG', 'score': 0.6542831, 'word': '##withcode', 'start': 264, 'end': 272}, {'entity_group': 'ORG', 'score': 0.6673948, 'word': 'BLEU', 'start': 452, 'end': 456}]",[],Papers With Code ##withcode BLEU,1
9,1.0,"### Dataset-specific metrics

Some datasets have specific metrics associated with them -- this is especially in the case of popular benchmarks like [GLUE](https://huggingface.co/metrics/glue) and [SQuAD](https://huggingface.co/metrics/squad).

<Tip warning={true}>
üí°
GLUE is actually a collection of different subsets on different tasks, so first you need to choose the one that corresponds to the NLI task, such as mnli, which is described as ‚Äúcrowdsourced collection of sentence pairs with textual entailment annotations‚Äù
</Tip>","[{'entity_group': 'MISC', 'score': 0.6997208, 'word': 'NL', 'start': 398, 'end': 400}]",[],NL,1
10,1.0,"If you are evaluating your model on a benchmark dataset like the ones mentioned above, you can use its dedicated evaluation metric. Make sure you respect the format that they require. For example, to evaluate your model on the [SQuAD](https://huggingface.co/datasets/squad) dataset, you need to feed the `question` and `context` into your model and return the `prediction_text`, which should be compared with the `references` (based on matching the `id` of the question) :","[{'entity_group': 'ORG', 'score': 0.676027, 'word': 'co', 'start': 255, 'end': 257}]",[],co,2
11,1.0,"```
>>> from evaluate import load
>>> squad_metric = load(""squad"")
>>> predictions = [{'prediction_text': '1976', 'id': '56e10a3be3433e1400422b22'}]
>>> references = [{'answers': {'answer_start': [97], 'text': ['1976']}, 'id': '56e10a3be3433e1400422b22'}]
>>> results = squad_metric.compute(predictions=predictions, references=references)
>>> results
{'exact_match': 100.0, 'f1': 100.0}
```

You can find examples of dataset structures by consulting the ""Dataset Preview"" function or the dataset card for a given dataset, and you can see how to use its dedicated evaluation function based on the metric card.",[],[],,1
12,2.0,"‰∏ªË¶ÅÁâπÁÇπ

ËÆ©Êàë‰ª¨Êù•‰ªãÁªç‰∏Ä‰∏ã Gradio ÊúÄÂèóÊ¨¢ËøéÁöÑ‰∏Ä‰∫õÂäüËÉΩÔºÅËøôÈáåÊòØ Gradio ÁöÑ‰∏ªË¶ÅÁâπÁÇπÔºö

1. [Ê∑ªÂä†Á§∫‰æãËæìÂÖ•](#example-inputs)
2. [‰º†ÈÄíËá™ÂÆö‰πâÈîôËØØÊ∂àÊÅØ](#errors)
3. [Ê∑ªÂä†ÊèèËø∞ÂÜÖÂÆπ](#descriptive-content)
4. [ËÆæÁΩÆÊóóÊ†á](#flagging)
5. [È¢ÑÂ§ÑÁêÜÂíåÂêéÂ§ÑÁêÜ](#preprocessing-and-postprocessing)
6. [Ê†∑ÂºèÂåñÊºîÁ§∫](#styling)
7. [ÊéíÈòüÁî®Êà∑](#queuing)
8. [Ëø≠‰ª£ËæìÂá∫](#iterative-outputs)
9. [ËøõÂ∫¶Êù°](#progress-bars)
10. [ÊâπÂ§ÑÁêÜÂáΩÊï∞](#batch-functions)
11. [Âú®Âçè‰ΩúÁ¨îËÆ∞Êú¨‰∏äËøêË°å](#colab-notebooks)

## Á§∫‰æãËæìÂÖ•

ÊÇ®ÂèØ‰ª•Êèê‰æõÁî®Êà∑ÂèØ‰ª•ËΩªÊùæÂä†ËΩΩÂà∞ ""Interface"" ‰∏≠ÁöÑÁ§∫‰æãÊï∞ÊçÆ„ÄÇËøôÂØπ‰∫éÊºîÁ§∫Ê®°ÂûãÊúüÊúõÁöÑËæìÂÖ•Á±ªÂûã‰ª•ÂèäÊºîÁ§∫Êï∞ÊçÆÈõÜÂíåÊ®°Âûã‰∏ÄËµ∑Êé¢Á¥¢ÁöÑÊñπÂºèÈùûÂ∏∏ÊúâÂ∏ÆÂä©„ÄÇË¶ÅÂä†ËΩΩÁ§∫‰æãÊï∞ÊçÆÔºåÊÇ®ÂèØ‰ª•Â∞ÜÂµåÂ•óÂàóË°®Êèê‰æõÁªô Interface ÊûÑÈÄ†ÂáΩÊï∞ÁöÑ `examples=` ÂÖ≥ÈîÆÂ≠óÂèÇÊï∞„ÄÇÂ§ñÈÉ®ÂàóË°®‰∏≠ÁöÑÊØè‰∏™Â≠êÂàóË°®Ë°®Á§∫‰∏Ä‰∏™Êï∞ÊçÆÊ†∑Êú¨ÔºåÂ≠êÂàóË°®‰∏≠ÁöÑÊØè‰∏™ÂÖÉÁ¥†Ë°®Á§∫ÊØè‰∏™ËæìÂÖ•ÁªÑ‰ª∂ÁöÑËæìÂÖ•„ÄÇÊúâÂÖ≥ÊØè‰∏™ÁªÑ‰ª∂ÁöÑÁ§∫‰æãÊï∞ÊçÆÊ†ºÂºèÂú®[Docs](https://gradio.app/docs#components)‰∏≠ÊúâËØ¥Êòé„ÄÇ

$code_calculator
$demo_calculator

ÊÇ®ÂèØ‰ª•Â∞ÜÂ§ßÂûãÊï∞ÊçÆÈõÜÂä†ËΩΩÂà∞Á§∫‰æã‰∏≠ÔºåÈÄöËøá Gradio ÊµèËßàÂíå‰∏éÊï∞ÊçÆÈõÜËøõË°å‰∫§‰∫í„ÄÇÁ§∫‰æãÂ∞ÜËá™Âä®ÂàÜÈ°µÔºàÂèØ‰ª•ÈÄöËøá Interface ÁöÑ `examples_per_page` ÂèÇÊï∞ËøõË°åÈÖçÁΩÆÔºâ„ÄÇ

ÁªßÁª≠‰∫ÜËß£Á§∫‰æãÔºåËØ∑ÂèÇÈòÖ[Êõ¥Â§öÁ§∫‰æã](https://gradio.app/more-on-examples)ÊåáÂçó„ÄÇ

## ÈîôËØØ

ÊÇ®Â∏åÊúõÂêëÁî®Êà∑‰º†ÈÄíËá™ÂÆö‰πâÈîôËØØÊ∂àÊÅØ„ÄÇ‰∏∫Ê≠§Ôºåwith `gr.Error(""custom message"")` Êù•ÊòæÁ§∫ÈîôËØØÊ∂àÊÅØ„ÄÇÂ¶ÇÊûúÂú®‰∏äÈù¢ÁöÑËÆ°ÁÆóÂô®Á§∫‰æã‰∏≠Â∞ùËØïÈô§‰ª•Èõ∂ÔºåÂ∞ÜÊòæÁ§∫Ëá™ÂÆö‰πâÈîôËØØÊ∂àÊÅØÁöÑÂºπÂá∫Ê®°ÊÄÅÁ™óÂè£„ÄÇ‰∫ÜËß£ÊúâÂÖ≥ÈîôËØØÁöÑÊõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÂèÇÈòÖ[ÊñáÊ°£](https://gradio.app/docs#error)„ÄÇ

## ÊèèËø∞ÊÄßÂÜÖÂÆπ",[],[],,1
13,2.0,"## ÊèèËø∞ÊÄßÂÜÖÂÆπ

Âú®ÂâçÈù¢ÁöÑÁ§∫‰æã‰∏≠ÔºåÊÇ®ÂèØËÉΩÂ∑≤ÁªèÊ≥®ÊÑèÂà∞ Interface ÊûÑÈÄ†ÂáΩÊï∞‰∏≠ÁöÑ `title=` Âíå `description=` ÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÔºåÂ∏ÆÂä©Áî®Êà∑‰∫ÜËß£ÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ

Interface ÊûÑÈÄ†ÂáΩÊï∞‰∏≠Êúâ‰∏â‰∏™ÂèÇÊï∞Áî®‰∫éÊåáÂÆöÊ≠§ÂÜÖÂÆπÂ∫îÊîæÁΩÆÂú®Âì™ÈáåÔºö

- `title`ÔºöÊé•ÂèóÊñáÊú¨ÔºåÂπ∂ÂèØ‰ª•Â∞ÜÂÖ∂ÊòæÁ§∫Âú®ÁïåÈù¢ÁöÑÈ°∂ÈÉ®Ôºå‰πüÂ∞ÜÊàê‰∏∫È°µÈù¢Ê†áÈ¢ò„ÄÇ
- `description`ÔºöÊé•ÂèóÊñáÊú¨„ÄÅMarkdown Êàñ HTMLÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÁΩÆÂú®Ê†áÈ¢òÊ≠£‰∏ãÊñπ„ÄÇ
- `article`Ôºö‰πüÊé•ÂèóÊñáÊú¨„ÄÅMarkdown Êàñ HTMLÔºåÂπ∂Â∞ÜÂÖ∂ÊîæÁΩÆÂú®ÁïåÈù¢‰∏ãÊñπ„ÄÇ

![annotated](/assets/guides/annotated.png)

Â¶ÇÊûúÊÇ®‰ΩøÁî®ÁöÑÊòØ `Blocks` APIÔºåÂàôÂèØ‰ª• with `gr.Markdown(...)` Êàñ `gr.HTML(...)` ÁªÑ‰ª∂Âú®‰ªª‰Ωï‰ΩçÁΩÆÊèíÂÖ•ÊñáÊú¨„ÄÅMarkdown Êàñ HTMLÔºåÂÖ∂‰∏≠ÊèèËø∞ÊÄßÂÜÖÂÆπ‰Ωç‰∫é `Component` ÊûÑÈÄ†ÂáΩÊï∞ÂÜÖÈÉ®„ÄÇ

Âè¶‰∏Ä‰∏™ÊúâÁî®ÁöÑÂÖ≥ÈîÆÂ≠óÂèÇÊï∞ÊòØ `label=`ÔºåÂÆÉÂ≠òÂú®‰∫éÊØè‰∏™ `Component` ‰∏≠„ÄÇËøô‰øÆÊîπ‰∫ÜÊØè‰∏™ `Component` È°∂ÈÉ®ÁöÑÊ†áÁ≠æÊñáÊú¨„ÄÇËøòÂèØ‰ª•‰∏∫ËØ∏Â¶Ç `Textbox` Êàñ `Radio` ‰πãÁ±ªÁöÑË°®ÂçïÂÖÉÁ¥†Ê∑ªÂä† `info=` ÂÖ≥ÈîÆÂ≠óÂèÇÊï∞Ôºå‰ª•Êèê‰æõÊúâÂÖ≥ÂÖ∂Áî®Ê≥ïÁöÑËøõ‰∏ÄÊ≠•‰ø°ÊÅØ„ÄÇ

```python
gr.Number(label='Âπ¥ÈæÑ', info='‰ª•Âπ¥‰∏∫Âçï‰ΩçÔºåÂøÖÈ°ªÂ§ß‰∫é0')",[],[],,1
14,2.0,"```

## ÊóóÊ†á

ÈªòËÆ§ÊÉÖÂÜµ‰∏ãÔºå""Interface"" Â∞ÜÊúâ‰∏Ä‰∏™ ""Flag"" ÊåâÈíÆ„ÄÇÂΩìÁî®Êà∑ÊµãËØïÊÇ®ÁöÑ `Interface` Êó∂ÔºåÂ¶ÇÊûúÁúãÂà∞ÊúâË∂£ÁöÑËæìÂá∫Ôºå‰æãÂ¶ÇÈîôËØØÊàñÊÑèÂ§ñÁöÑÊ®°ÂûãË°å‰∏∫Ôºå‰ªñ‰ª¨ÂèØ‰ª•Â∞ÜËæìÂÖ•Ê†áËÆ∞‰∏∫ÊÇ®ËøõË°åÊü•Áúã„ÄÇÂú®Áî± `Interface` ÊûÑÈÄ†ÂáΩÊï∞ÁöÑ `flagging_dir=` ÂèÇÊï∞Êèê‰æõÁöÑÁõÆÂΩï‰∏≠ÔºåÂ∞ÜËÆ∞ÂΩïÊ†áËÆ∞ÁöÑËæìÂÖ•Âà∞‰∏Ä‰∏™ CSV Êñá‰ª∂‰∏≠„ÄÇÂ¶ÇÊûúÁïåÈù¢Ê∂âÂèäÊñá‰ª∂Êï∞ÊçÆÔºå‰æãÂ¶ÇÂõæÂÉèÂíåÈü≥È¢ëÁªÑ‰ª∂ÔºåÂ∞ÜÂàõÂª∫Êñá‰ª∂Â§πÊù•Â≠òÂÇ®Ëøô‰∫õÊ†áËÆ∞ÁöÑÊï∞ÊçÆ„ÄÇ

‰æãÂ¶ÇÔºåÂØπ‰∫é‰∏äÈù¢ÊòæÁ§∫ÁöÑËÆ°ÁÆóÂô®ÁïåÈù¢ÔºåÊàë‰ª¨Â∞ÜÂú®‰∏ãÈù¢ÁöÑÊóóÊ†áÁõÆÂΩï‰∏≠Â≠òÂÇ®Ê†áËÆ∞ÁöÑÊï∞ÊçÆÔºö

```directory
+-- calculator.py
+-- flagged/
|   +-- logs.csv
```

_flagged/logs.csv_

```csv
num1,operation,num2,Output
5,add,7,12
6,subtract,1.5,4.5
```

‰∏éÊó©ÊúüÊòæÁ§∫ÁöÑÂÜ∑Ëâ≤ÁïåÈù¢Áõ∏ÂØπÂ∫îÔºåÊàë‰ª¨Â∞ÜÂú®‰∏ãÈù¢ÁöÑÊóóÊ†áÁõÆÂΩï‰∏≠Â≠òÂÇ®Ê†áËÆ∞ÁöÑÊï∞ÊçÆÔºö

```directory
+-- sepia.py
+-- flagged/
|   +-- logs.csv
|   +-- im/
|   |   +-- 0.png
|   |   +-- 1.png
|   +-- Output/
|   |   +-- 0.png
|   |   +-- 1.png
```

_flagged/logs.csv_

```csv
im,Output
im/0.png,Output/0.png
im/1.png,Output/1.png",[],[],,1
15,2.0,"```

_flagged/logs.csv_

```csv
im,Output
im/0.png,Output/0.png
im/1.png,Output/1.png
```

Â¶ÇÊûúÊÇ®Â∏åÊúõÁî®Êà∑Êèê‰æõÊóóÊ†áÂéüÂõ†ÔºåÂèØ‰ª•Â∞ÜÂ≠óÁ¨¶‰∏≤ÂàóË°®‰º†ÈÄíÁªô Interface ÁöÑ `flagging_options` ÂèÇÊï∞„ÄÇÁî®Êà∑Âú®ËøõË°åÊóóÊ†áÊó∂ÂøÖÈ°ªÈÄâÊã©ÂÖ∂‰∏≠‰∏Ä‰∏™Â≠óÁ¨¶‰∏≤ÔºåËøôÂ∞Ü‰Ωú‰∏∫ÈôÑÂä†Âàó‰øùÂ≠òÂà∞ CSV ‰∏≠„ÄÇ

## È¢ÑÂ§ÑÁêÜÂíåÂêéÂ§ÑÁêÜ (Preprocessing and Postprocessing)

![annotated](/assets/img/dataflow.svg)

Â¶ÇÊÇ®ÊâÄËßÅÔºåGradio ÂåÖÊã¨ÂèØ‰ª•Â§ÑÁêÜÂêÑÁßç‰∏çÂêåÊï∞ÊçÆÁ±ªÂûãÁöÑÁªÑ‰ª∂Ôºå‰æãÂ¶ÇÂõæÂÉè„ÄÅÈü≥È¢ëÂíåËßÜÈ¢ë„ÄÇÂ§ßÂ§öÊï∞ÁªÑ‰ª∂ÈÉΩÂèØ‰ª•Áî®‰ΩúËæìÂÖ•ÊàñËæìÂá∫„ÄÇ

ÂΩìÁªÑ‰ª∂Áî®‰ΩúËæìÂÖ•Êó∂ÔºåGradio Ëá™Âä®Â§ÑÁêÜ*È¢ÑÂ§ÑÁêÜ*ÔºåÂ∞ÜÊï∞ÊçÆ‰ªéÁî®Êà∑ÊµèËßàÂô®ÂèëÈÄÅÁöÑÁ±ªÂûãÔºà‰æãÂ¶ÇÁΩëÁªúÊëÑÂÉèÂ§¥Âø´ÁÖßÁöÑ base64 Ë°®Á§∫ÔºâËΩ¨Êç¢‰∏∫ÊÇ®ÁöÑÂáΩÊï∞ÂèØ‰ª•Êé•ÂèóÁöÑÂΩ¢ÂºèÔºà‰æãÂ¶Ç `numpy` Êï∞ÁªÑÔºâ„ÄÇ

ÂêåÊ†∑ÔºåÂΩìÁªÑ‰ª∂Áî®‰ΩúËæìÂá∫Êó∂ÔºåGradio Ëá™Âä®Â§ÑÁêÜ*ÂêéÂ§ÑÁêÜ*ÔºåÂ∞ÜÊï∞ÊçÆ‰ªéÂáΩÊï∞ËøîÂõûÁöÑÂΩ¢ÂºèÔºà‰æãÂ¶ÇÂõæÂÉèË∑ØÂæÑÂàóË°®ÔºâËΩ¨Êç¢‰∏∫ÂèØ‰ª•Âú®Áî®Êà∑ÊµèËßàÂô®‰∏≠ÊòæÁ§∫ÁöÑÂΩ¢ÂºèÔºà‰æãÂ¶Ç‰ª• base64 Ê†ºÂºèÊòæÁ§∫ÂõæÂÉèÁöÑ `Gallery`Ôºâ„ÄÇ

ÊÇ®ÂèØ‰ª•‰ΩøÁî®ÊûÑÂª∫ÂõæÂÉèÁªÑ‰ª∂Êó∂ÁöÑÂèÇÊï∞ÊéßÂà∂*È¢ÑÂ§ÑÁêÜ*„ÄÇ‰æãÂ¶ÇÔºåÂ¶ÇÊûúÊÇ®‰ΩøÁî®‰ª•‰∏ãÂèÇÊï∞ÂÆû‰æãÂåñ `Image` ÁªÑ‰ª∂ÔºåÂÆÉÂ∞ÜÂ∞ÜÂõæÂÉèËΩ¨Êç¢‰∏∫ `PIL` Á±ªÂûãÔºåÂπ∂Â∞ÜÂÖ∂ÈáçÂ°ë‰∏∫`(100, 100)`ÔºåËÄå‰∏çÁÆ°Êèê‰∫§Êó∂ÁöÑÂéüÂßãÂ§ßÂ∞èÂ¶Ç‰ΩïÔºö

```py
img = gr.Image(shape=(100, 100), type=""pil"")
```

Áõ∏ÂèçÔºåËøôÈáåÊàë‰ª¨‰øùÁïôÂõæÂÉèÁöÑÂéüÂßãÂ§ßÂ∞èÔºå‰ΩÜÂú®Â∞ÜÂÖ∂ËΩ¨Êç¢‰∏∫ numpy Êï∞ÁªÑ‰πãÂâçÂèçËΩ¨È¢úËâ≤Ôºö

```py
img = gr.Image(invert_colors=True, type=""numpy"")","[{'entity_group': 'ORG', 'score': 0.6811956, 'word': 'CS', 'start': 182, 'end': 184}, {'entity_group': 'ORG', 'score': 0.734595, 'word': 'Gradio', 'start': 282, 'end': 288}, {'entity_group': 'ORG', 'score': 0.94595224, 'word': 'G', 'start': 345, 'end': 346}, {'entity_group': 'ORG', 'score': 0.76004523, 'word': '##io', 'start': 349, 'end': 351}, {'entity_group': 'ORG', 'score': 0.9394122, 'word': 'G', 'start': 442, 'end': 443}, {'entity_group': 'ORG', 'score': 0.568808, 'word': '##io', 'start': 446, 'end': 448}]","[{'entity_group': 'ORG', 'score': 0.94595224, 'word': 'G', 'start': 345, 'end': 346}, {'entity_group': 'ORG', 'score': 0.9394122, 'word': 'G', 'start': 442, 'end': 443}]",CS Gradio G ##io G ##io,1
16,2.0,"```

ÂêéÂ§ÑÁêÜË¶ÅÂÆπÊòìÂæóÂ§öÔºÅGradio Ëá™Âä®ËØÜÂà´ËøîÂõûÊï∞ÊçÆÁöÑÊ†ºÂºèÔºà‰æãÂ¶Ç `Image` ÊòØ `numpy` Êï∞ÁªÑËøòÊòØ `str` Êñá‰ª∂Ë∑ØÂæÑÔºüÔºâÔºåÂπ∂Â∞ÜÂÖ∂ÂêéÂ§ÑÁêÜ‰∏∫ÂèØ‰ª•Áî±ÊµèËßàÂô®ÊòæÁ§∫ÁöÑÊ†ºÂºè„ÄÇ

ËØ∑Êü•Áúã[ÊñáÊ°£](https://gradio.app/docs)Ôºå‰∫ÜËß£ÊØè‰∏™ÁªÑ‰ª∂ÁöÑÊâÄÊúâ‰∏éÈ¢ÑÂ§ÑÁêÜÁõ∏ÂÖ≥ÁöÑÂèÇÊï∞„ÄÇ

## Ê†∑Âºè (Styling)

Gradio ‰∏ªÈ¢òÊòØËá™ÂÆö‰πâÂ∫îÁî®Á®ãÂ∫èÂ§ñËßÇÂíåÊÑüËßâÁöÑÊúÄÁÆÄÂçïÊñπÊ≥ï„ÄÇÊÇ®ÂèØ‰ª•ÈÄâÊã©Â§öÁßç‰∏ªÈ¢òÊàñÂàõÂª∫Ëá™Â∑±ÁöÑ‰∏ªÈ¢ò„ÄÇË¶ÅËøôÊ†∑ÂÅöÔºåËØ∑Â∞Ü `theme=` ÂèÇÊï∞‰º†ÈÄíÁªô `Interface` ÊûÑÈÄ†ÂáΩÊï∞„ÄÇ‰æãÂ¶ÇÔºö

```python
demo = gr.Interface(..., theme=gr.themes.Monochrome())
```

Gradio Â∏¶Êúâ‰∏ÄÁªÑÈ¢ÑÂÖàÊûÑÂª∫ÁöÑ‰∏ªÈ¢òÔºåÊÇ®ÂèØ‰ª•‰ªé `gr.themes.*` Âä†ËΩΩ„ÄÇÊÇ®ÂèØ‰ª•Êâ©Â±ïËøô‰∫õ‰∏ªÈ¢òÊàñ‰ªéÂ§¥ÂºÄÂßãÂàõÂª∫Ëá™Â∑±ÁöÑ‰∏ªÈ¢ò - ÊúâÂÖ≥Êõ¥Â§öËØ¶ÁªÜ‰ø°ÊÅØÔºåËØ∑ÂèÇÈòÖ[‰∏ªÈ¢òÊåáÂçó](https://gradio.app/theming-guide)„ÄÇ

Ë¶ÅÂ¢ûÂä†È¢ùÂ§ñÁöÑÊ†∑ÂºèËÉΩÂäõÔºåÊÇ®ÂèØ‰ª• with `css=` ÂÖ≥ÈîÆÂ≠óÂ∞Ü‰ªª‰Ωï CSS ‰º†ÈÄíÁªôÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫è„ÄÇ
Gradio Â∫îÁî®Á®ãÂ∫èÁöÑÂü∫Á±ªÊòØ `gradio-container`ÔºåÂõ†Ê≠§‰ª•‰∏ãÊòØ‰∏Ä‰∏™Êõ¥Êîπ Gradio Â∫îÁî®Á®ãÂ∫èËÉåÊôØÈ¢úËâ≤ÁöÑÁ§∫‰æãÔºö

```python
with `gr.Interface(css="".gradio-container {background-color: red}"") as demo:
    ...
```

## ÈòüÂàó (Queuing)

Â¶ÇÊûúÊÇ®ÁöÑÂ∫îÁî®Á®ãÂ∫èÈ¢ÑËÆ°‰ºöÊúâÂ§ßÈáèÊµÅÈáèÔºåËØ∑ with `queue()` ÊñπÊ≥ïÊù•ÊéßÂà∂Â§ÑÁêÜÈÄüÁéá„ÄÇËøôÂ∞ÜÊéíÈòüÂ§ÑÁêÜË∞ÉÁî®ÔºåÂõ†Ê≠§‰∏ÄÊ¨°Âè™Â§ÑÁêÜ‰∏ÄÂÆöÊï∞ÈáèÁöÑËØ∑Ê±Ç„ÄÇÈòüÂàó‰ΩøÁî® WebsocketsÔºåËøòÂèØ‰ª•Èò≤Ê≠¢ÁΩëÁªúË∂ÖÊó∂ÔºåÂõ†Ê≠§Â¶ÇÊûúÊÇ®ÁöÑÂáΩÊï∞ÁöÑÊé®ÁêÜÊó∂Èó¥ÂæàÈïøÔºà> 1 ÂàÜÈíüÔºâÔºåÂ∫î‰ΩøÁî®ÈòüÂàó„ÄÇ

with `Interface`Ôºö

```python
demo = gr.Interface(...).queue()
demo.launch()
```

with `Blocks`Ôºö

```python
with gr.Blocks() as demoÔºö
    #...
demo.queue()
demo.launch()","[{'entity_group': 'ORG', 'score': 0.7986496, 'word': 'G', 'start': 14, 'end': 15}, {'entity_group': 'ORG', 'score': 0.8154386, 'word': 'G', 'start': 164, 'end': 165}, {'entity_group': 'ORG', 'score': 0.52386147, 'word': '##io', 'start': 168, 'end': 170}, {'entity_group': 'ORG', 'score': 0.61498636, 'word': '##io', 'start': 330, 'end': 332}, {'entity_group': 'ORG', 'score': 0.7566947, 'word': 'G', 'start': 495, 'end': 496}, {'entity_group': 'ORG', 'score': 0.6091015, 'word': '##io', 'start': 499, 'end': 501}]","[{'entity_group': 'ORG', 'score': 0.8154386, 'word': 'G', 'start': 164, 'end': 165}]",G G ##io ##io G ##io,1
17,2.0,"```

with `Blocks`Ôºö

```python
with gr.Blocks() as demoÔºö
    #...
demo.queue()
demo.launch()
```

ÊÇ®ÂèØ‰ª•ÈÄöËøá‰ª•‰∏ãÊñπÂºèÊéßÂà∂‰∏ÄÊ¨°Â§ÑÁêÜÁöÑËØ∑Ê±ÇÊï∞ÈáèÔºö

```python
demo.queue(concurrency_count=3)
```

Êü•ÁúãÊúâÂÖ≥ÈÖçÁΩÆÂÖ∂‰ªñÈòüÂàóÂèÇÊï∞ÁöÑ[ÈòüÂàóÊñáÊ°£](/docs/#queue)„ÄÇ

Âú® Blocks ‰∏≠ÊåáÂÆö‰ªÖÂØπÊüê‰∫õÂáΩÊï∞ËøõË°åÊéíÈòüÔºö

```python
with gr.Blocks() as demo2Ôºö
    num1 = gr.Number()
    num2 = gr.Number()
    output = gr.Number()
    gr.Button(""Add"").click(
        lambda a, b: a + b, [num1, num2], output)
    gr.Button(""Multiply"").click(
        lambda a, b: a * b, [num1, num2], output, queue=True)
demo2.launch()
```

## Ëø≠‰ª£ËæìÂá∫ (Iterative Outputs)

Âú®Êüê‰∫õÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØËÉΩÈúÄË¶Å‰º†Ëæì‰∏ÄÁ≥ªÂàóËæìÂá∫ËÄå‰∏çÊòØ‰∏ÄÊ¨°ÊòæÁ§∫Âçï‰∏™ËæìÂá∫„ÄÇ‰æãÂ¶ÇÔºåÊÇ®ÂèØËÉΩÊúâ‰∏Ä‰∏™ÂõæÂÉèÁîüÊàêÊ®°ÂûãÔºåÂ∏åÊúõÊòæÁ§∫ÁîüÊàêÁöÑÊØè‰∏™Ê≠•È™§ÁöÑÂõæÂÉèÔºåÁõ¥Âà∞ÊúÄÁªàÂõæÂÉè„ÄÇÊàñËÄÖÊÇ®ÂèØËÉΩÊúâ‰∏Ä‰∏™ËÅäÂ§©Êú∫Âô®‰∫∫ÔºåÂÆÉÈÄêÂ≠óÈÄêÂè•Âú∞ÊµÅÂºè‰º†ËæìÂìçÂ∫îÔºåËÄå‰∏çÊòØ‰∏ÄÊ¨°ËøîÂõûÂÖ®ÈÉ®ÂìçÂ∫î„ÄÇ

Âú®ËøôÁßçÊÉÖÂÜµ‰∏ãÔºåÊÇ®ÂèØ‰ª•Â∞Ü**ÁîüÊàêÂô®**ÂáΩÊï∞Êèê‰æõÁªô GradioÔºåËÄå‰∏çÊòØÂ∏∏ËßÑÂáΩÊï∞„ÄÇÂú® Python ‰∏≠ÂàõÂª∫ÁîüÊàêÂô®ÈùûÂ∏∏ÁÆÄÂçïÔºöÂáΩÊï∞‰∏çÂ∫îËØ•Êúâ‰∏Ä‰∏™ÂçïÁã¨ÁöÑ `return` ÂÄºÔºåËÄåÊòØÂ∫îËØ• with `yield` ËøûÁª≠ËøîÂõû‰∏ÄÁ≥ªÂàóÂÄº„ÄÇÈÄöÂ∏∏Ôºå`yield` ËØ≠Âè•ÊîæÁΩÆÂú®ÊüêÁßçÂæ™ÁéØ‰∏≠„ÄÇ‰∏ãÈù¢ÊòØ‰∏Ä‰∏™ÁÆÄÂçïÁ§∫‰æãÔºåÁîüÊàêÂô®Âè™ÊòØÁÆÄÂçïËÆ°Êï∞Âà∞ÁªôÂÆöÊï∞Â≠óÔºö

```python
def my_generator(x):
    for i in range(x):
        yield i","[{'entity_group': 'ORG', 'score': 0.46530274, 'word': 'Python', 'start': 710, 'end': 716}]",[],Python,1
18,2.0,"```

ÊÇ®‰ª•‰∏éÂ∏∏ËßÑÂáΩÊï∞Áõ∏ÂêåÁöÑÊñπÂºèÂ∞ÜÁîüÊàêÂô®Êèê‰æõÁªô Gradio„ÄÇ‰æãÂ¶ÇÔºåËøôÊòØ‰∏Ä‰∏™ÔºàËôöÊãüÁöÑÔºâÂõæÂÉèÁîüÊàêÊ®°ÂûãÔºåÂÆÉÂú®ËæìÂá∫ÂõæÂÉè‰πãÂâçÁîüÊàêÊï∞‰∏™Ê≠•È™§ÁöÑÂô™Èü≥Ôºö

$code_fake_diffusion
$demo_fake_diffusion

ËØ∑Ê≥®ÊÑèÔºåÊàë‰ª¨Âú®Ëø≠‰ª£Âô®‰∏≠Ê∑ªÂä†‰∫Ü `time.sleep(1)`Ôºå‰ª•ÂàõÂª∫Ê≠•È™§‰πãÈó¥ÁöÑ‰∫∫Â∑•ÊöÇÂÅúÔºå‰ª•‰æøÊÇ®ÂèØ‰ª•ËßÇÂØüËø≠‰ª£Âô®ÁöÑÊ≠•È™§ÔºàÂú®ÁúüÂÆûÁöÑÂõæÂÉèÁîüÊàêÊ®°Âûã‰∏≠ÔºåËøôÂèØËÉΩÊòØ‰∏çÂøÖË¶ÅÁöÑÔºâ„ÄÇ

Â∞ÜÁîüÊàêÂô®Êèê‰æõÁªô Gradio **ÈúÄË¶Å**Âú®Â∫ïÂ±Ç Interface Êàñ Blocks ‰∏≠ÂêØÁî®ÈòüÂàóÔºàËØ∑ÂèÇÈòÖ‰∏äÈù¢ÁöÑÈòüÂàóÈÉ®ÂàÜÔºâ„ÄÇ

## ËøõÂ∫¶Êù°

Gradio ÊîØÊåÅÂàõÂª∫Ëá™ÂÆö‰πâËøõÂ∫¶Êù°Ôºå‰ª•‰æøÊÇ®ÂèØ‰ª•Ëá™ÂÆö‰πâÂíåÊéßÂà∂ÂêëÁî®Êà∑ÊòæÁ§∫ÁöÑËøõÂ∫¶Êõ¥Êñ∞„ÄÇË¶ÅÂêØÁî®Ê≠§ÂäüËÉΩÔºåÂè™ÈúÄ‰∏∫ÊñπÊ≥ïÊ∑ªÂä†‰∏Ä‰∏™ÈªòËÆ§ÂÄº‰∏∫ `gr.Progress` ÂÆû‰æãÁöÑÂèÇÊï∞Âç≥ÂèØ„ÄÇÁÑ∂ÂêéÔºåÊÇ®ÂèØ‰ª•Áõ¥Êé•Ë∞ÉÁî®Ê≠§ÂÆû‰æãÂπ∂‰º†ÂÖ• 0 Âà∞ 1 ‰πãÈó¥ÁöÑÊµÆÁÇπÊï∞Êù•Êõ¥Êñ∞ËøõÂ∫¶Á∫ßÂà´ÔºåÊàñËÄÖ with `Progress` ÂÆû‰æãÁöÑ `tqdm()` ÊñπÊ≥ïÊù•Ë∑üË∏™ÂèØËø≠‰ª£ÂØπË±°‰∏äÁöÑËøõÂ∫¶ÔºåÂ¶Ç‰∏ãÊâÄÁ§∫„ÄÇÂøÖÈ°ªÂêØÁî®ÈòüÂàó‰ª•ËøõË°åËøõÂ∫¶Êõ¥Êñ∞„ÄÇ

$code_progress_simple
$demo_progress_simple

Â¶ÇÊûúÊÇ® with `tqdm` Â∫ìÔºåÂπ∂‰∏îÂ∏åÊúõ‰ªéÂáΩÊï∞ÂÜÖÈÉ®ÁöÑ‰ªª‰Ωï `tqdm.tqdm` Ëá™Âä®Êä•ÂëäËøõÂ∫¶Êõ¥Êñ∞ÔºåËØ∑Â∞ÜÈªòËÆ§ÂèÇÊï∞ËÆæÁΩÆ‰∏∫ `gr.Progress(track_tqdm=True)`ÔºÅ

## ÊâπÂ§ÑÁêÜÂáΩÊï∞ (Batch Functions)

Gradio ÊîØÊåÅ‰º†ÈÄí*ÊâπÂ§ÑÁêÜ*ÂáΩÊï∞„ÄÇÊâπÂ§ÑÁêÜÂáΩÊï∞Âè™ÊòØÊé•ÂèóËæìÂÖ•ÂàóË°®Âπ∂ËøîÂõûÈ¢ÑÊµãÂàóË°®ÁöÑÂáΩÊï∞„ÄÇ

‰æãÂ¶ÇÔºåËøôÊòØ‰∏Ä‰∏™ÊâπÂ§ÑÁêÜÂáΩÊï∞ÔºåÂÆÉÊé•Âèó‰∏§‰∏™ËæìÂÖ•ÂàóË°®Ôºà‰∏Ä‰∏™ÂçïËØçÂàóË°®Âíå‰∏Ä‰∏™Êï¥Êï∞ÂàóË°®ÔºâÔºåÂπ∂ËøîÂõû‰øÆÂâ™ËøáÁöÑÂçïËØçÂàóË°®‰Ωú‰∏∫ËæìÂá∫Ôºö

```python
import time

def trim_words(words, lens):
    trimmed_words = []
    time.sleep(5)
    for w, l in zip(words, lens):
        trimmed_words.append(w[:int(l)])
    return [trimmed_words]
    for w, l in zip(words, lens):",[],[],,1
19,2.0,"```

‰ΩøÁî®ÊâπÂ§ÑÁêÜÂáΩÊï∞ÁöÑ‰ºòÁÇπÊòØÔºåÂ¶ÇÊûúÂêØÁî®‰∫ÜÈòüÂàóÔºåGradio ÊúçÂä°Âô®ÂèØ‰ª•Ëá™Âä®*ÊâπÂ§ÑÁêÜ*‰º†ÂÖ•ÁöÑËØ∑Ê±ÇÂπ∂Âπ∂Ë°åÂ§ÑÁêÜÂÆÉ‰ª¨Ôºå‰ªéËÄåÂèØËÉΩÂä†Âø´ÊºîÁ§∫ÈÄüÂ∫¶„ÄÇ‰ª•‰∏ãÊòØ Gradio ‰ª£Á†ÅÁöÑÁ§∫‰æãÔºàËØ∑Ê≥®ÊÑè `batch=True` Âíå `max_batch_size=16` - Ëøô‰∏§‰∏™ÂèÇÊï∞ÈÉΩÂèØ‰ª•‰º†ÈÄíÁªô‰∫ã‰ª∂Ëß¶ÂèëÂô®Êàñ `Interface` Á±ªÔºâ

with `Interface`Ôºö

```python
demo = gr.Interface(trim_words, [""textbox"", ""number""], [""output""],
                    batch=True, max_batch_size=16)
demo.queue()
demo.launch()
```

with `Blocks`Ôºö

```python
import gradio as gr

with gr.Blocks() as demo:
    with gr.Row():
        word = gr.Textbox(label=""word"")
        leng = gr.Number(label=""leng"")
        output = gr.Textbox(label=""Output"")
    with gr.Row():
        run = gr.Button()

    event = run.click(trim_words, [word, leng], output, batch=True, max_batch_size=16)

demo.queue()
demo.launch()",[],[],,1
20,2.0,"```

Âú®‰∏äÈù¢ÁöÑÁ§∫‰æã‰∏≠ÔºåÂèØ‰ª•Âπ∂Ë°åÂ§ÑÁêÜ 16 ‰∏™ËØ∑Ê±ÇÔºàÊÄªÊé®ÁêÜÊó∂Èó¥‰∏∫ 5 ÁßíÔºâÔºåËÄå‰∏çÊòØÂàÜÂà´Â§ÑÁêÜÊØè‰∏™ËØ∑Ê±ÇÔºàÊÄªÊé®ÁêÜÊó∂Èó¥‰∏∫ 80 ÁßíÔºâ„ÄÇËÆ∏Â§ö Hugging Face ÁöÑ `transformers` Âíå `diffusers` Ê®°ÂûãÂú® Gradio ÁöÑÊâπÂ§ÑÁêÜÊ®°Âºè‰∏ãËá™ÁÑ∂Â∑•‰ΩúÔºöËøôÊòØ[‰ΩøÁî®ÊâπÂ§ÑÁêÜÁîüÊàêÂõæÂÉèÁöÑÁ§∫‰æãÊºîÁ§∫](https://github.com/gradio-app/gradio/blob/main/demo/diffusers_with_batching/run.py)

Ê≥®ÊÑèÔºö‰ΩøÁî® Gradio ÁöÑÊâπÂ§ÑÁêÜÂáΩÊï∞ **requires** Âú®Â∫ïÂ±Ç Interface Êàñ Blocks ‰∏≠ÂêØÁî®ÈòüÂàóÔºàËØ∑ÂèÇÈòÖ‰∏äÈù¢ÁöÑÈòüÂàóÈÉ®ÂàÜÔºâ„ÄÇ

## Gradio Á¨îËÆ∞Êú¨ (Colab Notebooks)

Gradio ÂèØ‰ª•Âú®‰ªª‰ΩïËøêË°å Python ÁöÑÂú∞ÊñπËøêË°åÔºåÂåÖÊã¨Êú¨Âú∞ Jupyter Á¨îËÆ∞Êú¨ÂíåÂçè‰ΩúÁ¨îËÆ∞Êú¨ÔºåÂ¶Ç[Google Colab](https://colab.research.google.com/)„ÄÇÂØπ‰∫éÊú¨Âú∞ Jupyter Á¨îËÆ∞Êú¨Âíå Google Colab Á¨îËÆ∞Êú¨ÔºåGradio Âú®Êú¨Âú∞ÊúçÂä°Âô®‰∏äËøêË°åÔºåÊÇ®ÂèØ‰ª•Âú®ÊµèËßàÂô®‰∏≠‰∏é‰πã‰∫§‰∫í„ÄÇÔºàÊ≥®ÊÑèÔºöÂØπ‰∫é Google ColabÔºåËøôÊòØÈÄöËøá[ÊúçÂä°Â∑•‰ΩúÂô®ÈößÈÅì](https://github.com/tensorflow/tensorboard/blob/master/docs/design/colab_integration.md)ÂÆûÁé∞ÁöÑÔºåÊÇ®ÁöÑÊµèËßàÂô®ÈúÄË¶ÅÂêØÁî® cookies„ÄÇÔºâÂØπ‰∫éÂÖ∂‰ªñËøúÁ®ãÁ¨îËÆ∞Êú¨ÔºåGradio ‰πüÂ∞ÜÂú®ÊúçÂä°Âô®‰∏äËøêË°åÔºå‰ΩÜÊÇ®ÈúÄË¶Å‰ΩøÁî®[SSH ÈößÈÅì](https://coderwall.com/p/ohk6cg/remote-access-to-ipython-notebooks-via-ssh)Âú®Êú¨Âú∞ÊµèËßàÂô®‰∏≠Êü•ÁúãÂ∫îÁî®Á®ãÂ∫è„ÄÇÈÄöÂ∏∏ÔºåÊõ¥ÁÆÄÂçïÁöÑÈÄâÊã©ÊòØ‰ΩøÁî® Gradio ÂÜÖÁΩÆÁöÑÂÖ¨ÂÖ±ÈìæÊé•Ôºå[Âú®‰∏ã‰∏ÄÁØáÊåáÂçó‰∏≠ËÆ®ËÆ∫](/sharing-your-app/#sharing-demos)„ÄÇ","[{'entity_group': 'ORG', 'score': 0.743964, 'word': 'G', 'start': 115, 'end': 116}, {'entity_group': 'ORG', 'score': 0.6189242, 'word': '##io', 'start': 119, 'end': 121}, {'entity_group': 'ORG', 'score': 0.9138333, 'word': 'Colab Note', 'start': 329, 'end': 339}, {'entity_group': 'ORG', 'score': 0.79719484, 'word': 'G', 'start': 347, 'end': 348}, {'entity_group': 'ORG', 'score': 0.59666395, 'word': '##io', 'start': 351, 'end': 353}, {'entity_group': 'ORG', 'score': 0.8304504, 'word': 'Python', 'start': 362, 'end': 368}, {'entity_group': 'ORG', 'score': 0.5766141, 'word': '##ter', 'start': 384, 'end': 387}, {'entity_group': 'ORG', 'score': 0.807866, 'word': 'Google Cola', 'start': 400, 'end': 411}, {'entity_group': 'ORG', 'score': 0.65464234, 'word': 'Google Cola', 'start': 468, 'end': 479}, {'entity_group': 'ORG', 'score': 0.8632249, 'word': 'Google Colab', 'start': 522, 'end': 534}]","[{'entity_group': 'ORG', 'score': 0.9138333, 'word': 'Colab Note', 'start': 329, 'end': 339}, {'entity_group': 'ORG', 'score': 0.8304504, 'word': 'Python', 'start': 362, 'end': 368}, {'entity_group': 'ORG', 'score': 0.807866, 'word': 'Google Cola', 'start': 400, 'end': 411}, {'entity_group': 'ORG', 'score': 0.8632249, 'word': 'Google Colab', 'start': 522, 'end': 534}]",G ##io Colab Note G ##io Python ##ter Google Cola Google Cola Google Colab,1
21,3.0,"!--Copyright 2023 The HuggingFace Team. All rights reserved.

Licensed under the Apache License, Version 2.0 (the ""License""); you may not use this file except in compliance with
the License. You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on
an ""AS IS"" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the

‚ö†Ô∏è Note that this file is in Markdown but contain specific syntax for our doc-builder (similar to MDX) that may not be
rendered properly in your Markdown viewer.

-->

# Training on TPU with TensorFlow

<Tip>

If you don't need long explanations and just want TPU code samples to get started with, check out [our TPU example notebook!](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb)

</Tip>

### What is a TPU?","[{'entity_group': 'ORG', 'score': 0.9904095, 'word': 'HuggingFace Team', 'start': 22, 'end': 38}, {'entity_group': 'MISC', 'score': 0.99640834, 'word': 'Apache License', 'start': 81, 'end': 95}, {'entity_group': 'MISC', 'score': 0.550146, 'word': '2', 'start': 105, 'end': 106}, {'entity_group': 'MISC', 'score': 0.9915487, 'word': 'License', 'start': 115, 'end': 122}, {'entity_group': 'MISC', 'score': 0.99155116, 'word': 'License', 'start': 182, 'end': 189}, {'entity_group': 'MISC', 'score': 0.9855665, 'word': 'License', 'start': 220, 'end': 227}, {'entity_group': 'ORG', 'score': 0.84930384, 'word': '##che', 'start': 246, 'end': 249}, {'entity_group': 'MISC', 'score': 0.98078716, 'word': 'License', 'start': 366, 'end': 373}, {'entity_group': 'MISC', 'score': 0.9715865, 'word': 'License', 'start': 491, 'end': 498}, {'entity_group': 'MISC', 'score': 0.752228, 'word': 'MDX', 'start': 606, 'end': 609}, {'entity_group': 'MISC', 'score': 0.4870647, 'word': 'Mark', 'start': 653, 'end': 657}, {'entity_group': 'MISC', 'score': 0.8722228, 'word': 'Ten', 'start': 699, 'end': 702}]","[{'entity_group': 'ORG', 'score': 0.9904095, 'word': 'HuggingFace Team', 'start': 22, 'end': 38}, {'entity_group': 'MISC', 'score': 0.99640834, 'word': 'Apache License', 'start': 81, 'end': 95}, {'entity_group': 'MISC', 'score': 0.9915487, 'word': 'License', 'start': 115, 'end': 122}, {'entity_group': 'MISC', 'score': 0.99155116, 'word': 'License', 'start': 182, 'end': 189}, {'entity_group': 'MISC', 'score': 0.9855665, 'word': 'License', 'start': 220, 'end': 227}, {'entity_group': 'ORG', 'score': 0.84930384, 'word': '##che', 'start': 246, 'end': 249}, {'entity_group': 'MISC', 'score': 0.98078716, 'word': 'License', 'start': 366, 'end': 373}, {'entity_group': 'MISC', 'score': 0.9715865, 'word': 'License', 'start': 491, 'end': 498}, {'entity_group': 'MISC', 'score': 0.8722228, 'word': 'Ten', 'start': 699, 'end': 702}]",HuggingFace Team Apache License 2 License License License ##che License License MDX Mark Ten,1
22,3.0,"</Tip>

### What is a TPU?

A TPU is a **Tensor Processing Unit.** They are hardware designed by Google, which are used to greatly speed up the tensor computations within neural networks, much like GPUs. They can be used for both network training and inference. They are generally accessed through Google‚Äôs cloud services, but small TPUs can also be accessed directly for free through Google Colab and Kaggle Kernels.

Because [all TensorFlow models in ü§ó Transformers are Keras models](https://huggingface.co/blog/tensorflow-philosophy), most of the methods in this document are generally applicable to TPU training for any Keras model! However, there are a few points that are specific to the HuggingFace ecosystem (hug-o-system?) of Transformers and Datasets, and we‚Äôll make sure to flag them up when we get to them.

### What kinds of TPU are available?","[{'entity_group': 'MISC', 'score': 0.49240226, 'word': 'Ten', 'start': 41, 'end': 44}, {'entity_group': 'ORG', 'score': 0.6413166, 'word': 'Process', 'start': 48, 'end': 55}, {'entity_group': 'ORG', 'score': 0.85466146, 'word': 'Unit', 'start': 59, 'end': 63}, {'entity_group': 'ORG', 'score': 0.99851805, 'word': 'Google', 'start': 97, 'end': 103}, {'entity_group': 'ORG', 'score': 0.99777716, 'word': 'Google', 'start': 298, 'end': 304}, {'entity_group': 'ORG', 'score': 0.89407235, 'word': 'Google Colab', 'start': 385, 'end': 397}, {'entity_group': 'ORG', 'score': 0.91664046, 'word': 'Kaggle Kernels', 'start': 402, 'end': 416}, {'entity_group': 'MISC', 'score': 0.9100782, 'word': 'Ten', 'start': 432, 'end': 435}, {'entity_group': 'ORG', 'score': 0.46061474, 'word': '##Flow', 'start': 438, 'end': 442}, {'entity_group': 'ORG', 'score': 0.9143801, 'word': 'Transformers', 'start': 455, 'end': 467}, {'entity_group': 'MISC', 'score': 0.92079115, 'word': 'Keras', 'start': 472, 'end': 477}, {'entity_group': 'MISC', 'score': 0.9298766, 'word': 'Keras', 'start': 624, 'end': 629}, {'entity_group': 'MISC', 'score': 0.6098108, 'word': 'Hu', 'start': 694, 'end': 696}, {'entity_group': 'ORG', 'score': 0.75078136, 'word': '##ggingFace', 'start': 696, 'end': 705}, {'entity_group': 'ORG', 'score': 0.9783788, 'word': 'Transformers', 'start': 735, 'end': 747}, {'entity_group': 'ORG', 'score': 0.9399233, 'word': 'Datasets', 'start': 752, 'end': 760}]","[{'entity_group': 'ORG', 'score': 0.85466146, 'word': 'Unit', 'start': 59, 'end': 63}, {'entity_group': 'ORG', 'score': 0.99851805, 'word': 'Google', 'start': 97, 'end': 103}, {'entity_group': 'ORG', 'score': 0.99777716, 'word': 'Google', 'start': 298, 'end': 304}, {'entity_group': 'ORG', 'score': 0.89407235, 'word': 'Google Colab', 'start': 385, 'end': 397}, {'entity_group': 'ORG', 'score': 0.91664046, 'word': 'Kaggle Kernels', 'start': 402, 'end': 416}, {'entity_group': 'MISC', 'score': 0.9100782, 'word': 'Ten', 'start': 432, 'end': 435}, {'entity_group': 'ORG', 'score': 0.9143801, 'word': 'Transformers', 'start': 455, 'end': 467}, {'entity_group': 'MISC', 'score': 0.92079115, 'word': 'Keras', 'start': 472, 'end': 477}, {'entity_group': 'MISC', 'score': 0.9298766, 'word': 'Keras', 'start': 624, 'end': 629}, {'entity_group': 'ORG', 'score': 0.9783788, 'word': 'Transformers', 'start': 735, 'end': 747}, {'entity_group': 'ORG', 'score': 0.9399233, 'word': 'Datasets', 'start': 752, 'end': 760}]",Ten Process Unit Google Google Google Colab Kaggle Kernels Ten ##Flow Transformers Keras Keras Hu ##ggingFace Transformers Datasets,1
23,3.0,"### What kinds of TPU are available?

New users are often very confused by the range of TPUs, and the different ways to access them. The first key distinction to understand is the difference between **TPU Nodes** and **TPU VMs.**

When you use a **TPU Node**, you are effectively indirectly accessing a remote TPU. You will need a separate VM, which will initialize your network and data pipeline and then forward them to the remote node. When you use a TPU on Google Colab, you are accessing it in the **TPU Node** style.","[{'entity_group': 'MISC', 'score': 0.82992524, 'word': 'Google Colab', 'start': 461, 'end': 473}]","[{'entity_group': 'MISC', 'score': 0.82992524, 'word': 'Google Colab', 'start': 461, 'end': 473}]",Google Colab,1
24,3.0,"Using TPU Nodes can have some quite unexpected behaviour for people who aren‚Äôt used to them! In particular, because the TPU is located on a physically different system to the machine you‚Äôre running your Python code on, your data cannot be local to your machine - any data pipeline that loads from your machine‚Äôs internal storage will totally fail! Instead, data must be stored in Google Cloud Storage where your data pipeline can still access it, even when the pipeline is running on the remote TPU node.

<Tip>

If you can fit all your data in memory as `np.ndarray` or `tf.Tensor`, then you can `fit()` on that data even when using Colab or a TPU Node, without needing to upload it to Google Cloud Storage.

</Tip>

<Tip>","[{'entity_group': 'MISC', 'score': 0.9681855, 'word': 'Python', 'start': 203, 'end': 209}, {'entity_group': 'ORG', 'score': 0.7975944, 'word': 'Google Cloud Storage', 'start': 380, 'end': 400}, {'entity_group': 'MISC', 'score': 0.837288, 'word': 'Ten', 'start': 575, 'end': 578}, {'entity_group': 'ORG', 'score': 0.5466405, 'word': 'Colab', 'start': 634, 'end': 639}, {'entity_group': 'ORG', 'score': 0.8191575, 'word': 'Google Cloud Storage', 'start': 687, 'end': 707}]","[{'entity_group': 'MISC', 'score': 0.9681855, 'word': 'Python', 'start': 203, 'end': 209}, {'entity_group': 'MISC', 'score': 0.837288, 'word': 'Ten', 'start': 575, 'end': 578}, {'entity_group': 'ORG', 'score': 0.8191575, 'word': 'Google Cloud Storage', 'start': 687, 'end': 707}]",Python Google Cloud Storage Ten Colab Google Cloud Storage,1
25,3.0,"</Tip>

<Tip>

**ü§óSpecific Hugging Face Tipü§ó:** The methods `Dataset.to_tf_dataset()` and its higher-level wrapper `model.prepare_tf_dataset()` , which you will see throughout our TF code examples, will both fail on a TPU Node. The reason for this is that even though they create a `tf.data.Dataset` it is not a ‚Äúpure‚Äù `tf.data` pipeline and uses `tf.numpy_function` or `Dataset.from_generator()` to stream data from the underlying HuggingFace `Dataset`. This HuggingFace `Dataset` is backed by data that is on a local disc and which the remote TPU Node will not be able to read.

</Tip>

The second way to access a TPU is via a **TPU VM.** When using a TPU VM, you connect directly to the machine that the TPU is attached to, much like training on a GPU VM. TPU VMs are generally easier to work with, particularly when it comes to your data pipeline. All of the above warnings do not apply to TPU VMs!","[{'entity_group': 'ORG', 'score': 0.4814121, 'word': '##P', 'start': 219, 'end': 220}, {'entity_group': 'MISC', 'score': 0.54053, 'word': '##de', 'start': 224, 'end': 226}, {'entity_group': 'MISC', 'score': 0.6970787, 'word': 'Hu', 'start': 432, 'end': 434}, {'entity_group': 'ORG', 'score': 0.6774397, 'word': '##Face', 'start': 439, 'end': 443}, {'entity_group': 'MISC', 'score': 0.5460094, 'word': 'Hu', 'start': 460, 'end': 462}, {'entity_group': 'ORG', 'score': 0.65417284, 'word': '##Face', 'start': 467, 'end': 471}]",[],##P ##de Hu ##Face Hu ##Face,0
26,3.0,"This is an opinionated document, so here‚Äôs our opinion: **Avoid using TPU Node if possible.** It is more confusing and more difficult to debug than TPU VMs. It is also likely to be unsupported in future - Google‚Äôs latest TPU, TPUv4, can only be accessed as a TPU VM, which suggests that TPU Nodes are increasingly going to become a ‚Äúlegacy‚Äù access method. However, we understand that the only free TPU access is on Colab and Kaggle Kernels, which uses TPU Node - so we‚Äôll try to explain how to handle it if you have to! Check the [TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) for code samples that explain this in more detail.

### What sizes of TPU are available?","[{'entity_group': 'ORG', 'score': 0.9979359, 'word': 'Google', 'start': 205, 'end': 211}, {'entity_group': 'ORG', 'score': 0.9603121, 'word': 'Colab', 'start': 415, 'end': 420}, {'entity_group': 'ORG', 'score': 0.9657249, 'word': 'Kaggle Kernels', 'start': 425, 'end': 439}]","[{'entity_group': 'ORG', 'score': 0.9979359, 'word': 'Google', 'start': 205, 'end': 211}, {'entity_group': 'ORG', 'score': 0.9603121, 'word': 'Colab', 'start': 415, 'end': 420}, {'entity_group': 'ORG', 'score': 0.9657249, 'word': 'Kaggle Kernels', 'start': 425, 'end': 439}]",Google Colab Kaggle Kernels,1
27,3.0,"### What sizes of TPU are available?

A single TPU (a v2-8/v3-8/v4-8) runs 8 replicas. TPUs exist in **pods** that can run hundreds or thousands of replicas simultaneously. When you use more than a single TPU but less than a whole pod (for example, a v3-32), your TPU fleet is referred to as a **pod slice.**

When you access a free TPU via Colab, you generally get a single v2-8 TPU.

### I keep hearing about this XLA thing. What‚Äôs XLA, and how does it relate to TPUs?

XLA is an optimizing compiler, used by both TensorFlow and JAX. In JAX it is the only compiler, whereas in TensorFlow it is optional (but mandatory on TPU!). The easiest way to enable it when training a Keras model is to pass the argument `jit_compile=True` to `model.compile()`. If you don‚Äôt get any errors and performance is good, that‚Äôs a great sign that you‚Äôre ready to move to TPU!","[{'entity_group': 'ORG', 'score': 0.84434414, 'word': 'Colab', 'start': 341, 'end': 346}, {'entity_group': 'ORG', 'score': 0.94386154, 'word': 'XLA', 'start': 416, 'end': 419}, {'entity_group': 'ORG', 'score': 0.96233875, 'word': 'XLA', 'start': 434, 'end': 437}, {'entity_group': 'ORG', 'score': 0.9939508, 'word': 'XLA', 'start': 472, 'end': 475}, {'entity_group': 'ORG', 'score': 0.983164, 'word': 'TensorFlow', 'start': 516, 'end': 526}, {'entity_group': 'ORG', 'score': 0.99556476, 'word': 'JAX', 'start': 531, 'end': 534}, {'entity_group': 'ORG', 'score': 0.956261, 'word': 'JAX', 'start': 539, 'end': 542}, {'entity_group': 'ORG', 'score': 0.9794344, 'word': 'TensorFlow', 'start': 579, 'end': 589}, {'entity_group': 'MISC', 'score': 0.8842287, 'word': 'Keras', 'start': 675, 'end': 680}]","[{'entity_group': 'ORG', 'score': 0.84434414, 'word': 'Colab', 'start': 341, 'end': 346}, {'entity_group': 'ORG', 'score': 0.94386154, 'word': 'XLA', 'start': 416, 'end': 419}, {'entity_group': 'ORG', 'score': 0.96233875, 'word': 'XLA', 'start': 434, 'end': 437}, {'entity_group': 'ORG', 'score': 0.9939508, 'word': 'XLA', 'start': 472, 'end': 475}, {'entity_group': 'ORG', 'score': 0.983164, 'word': 'TensorFlow', 'start': 516, 'end': 526}, {'entity_group': 'ORG', 'score': 0.99556476, 'word': 'JAX', 'start': 531, 'end': 534}, {'entity_group': 'ORG', 'score': 0.956261, 'word': 'JAX', 'start': 539, 'end': 542}, {'entity_group': 'ORG', 'score': 0.9794344, 'word': 'TensorFlow', 'start': 579, 'end': 589}, {'entity_group': 'MISC', 'score': 0.8842287, 'word': 'Keras', 'start': 675, 'end': 680}]",Colab XLA XLA XLA TensorFlow JAX JAX TensorFlow Keras,1
28,3.0,"Debugging on TPU is generally a bit harder than on CPU/GPU, so we recommend getting your code running on CPU/GPU with XLA first before trying it on TPU. You don‚Äôt have to train for long, of course - just for a few steps to make sure that your model and data pipeline are working like you expect them to.

<Tip>

XLA compiled code is usually faster - so even if you‚Äôre not planning to run on TPU, adding `jit_compile=True` can improve your performance. Be sure to note the caveats below about XLA compatibility, though!

</Tip>

<Tip warning={true}>

**Tip born of painful experience:** Although using `jit_compile=True` is a good way to get a speed boost and test if your CPU/GPU code is XLA-compatible, it can actually cause a lot of problems if you leave it in when actually training on TPU. XLA compilation will happen implicitly on TPU, so remember to remove that line before actually running your code on a TPU!

</Tip>

### How do I make my model XLA compatible?","[{'entity_group': 'LOC', 'score': 0.4547236, 'word': 'T', 'start': 13, 'end': 14}, {'entity_group': 'ORG', 'score': 0.50989354, 'word': 'GP', 'start': 55, 'end': 57}, {'entity_group': 'ORG', 'score': 0.4329802, 'word': 'GP', 'start': 109, 'end': 111}, {'entity_group': 'ORG', 'score': 0.82214177, 'word': 'XLA', 'start': 118, 'end': 121}, {'entity_group': 'LOC', 'score': 0.4206813, 'word': 'T', 'start': 148, 'end': 149}, {'entity_group': 'ORG', 'score': 0.9610584, 'word': 'XLA', 'start': 312, 'end': 315}, {'entity_group': 'LOC', 'score': 0.578015, 'word': 'T', 'start': 391, 'end': 392}, {'entity_group': 'ORG', 'score': 0.5267807, 'word': '##P', 'start': 392, 'end': 393}, {'entity_group': 'MISC', 'score': 0.60119796, 'word': 'XLA', 'start': 492, 'end': 495}, {'entity_group': 'MISC', 'score': 0.96425706, 'word': 'XLA', 'start': 688, 'end': 691}, {'entity_group': 'MISC', 'score': 0.8295632, 'word': 'XLA', 'start': 794, 'end': 797}, {'entity_group': 'LOC', 'score': 0.65075225, 'word': 'T', 'start': 836, 'end': 837}, {'entity_group': 'MISC', 'score': 0.71673256, 'word': 'XLA', 'start': 953, 'end': 956}]","[{'entity_group': 'ORG', 'score': 0.82214177, 'word': 'XLA', 'start': 118, 'end': 121}, {'entity_group': 'ORG', 'score': 0.9610584, 'word': 'XLA', 'start': 312, 'end': 315}, {'entity_group': 'MISC', 'score': 0.96425706, 'word': 'XLA', 'start': 688, 'end': 691}, {'entity_group': 'MISC', 'score': 0.8295632, 'word': 'XLA', 'start': 794, 'end': 797}]",T GP GP XLA T XLA T ##P XLA XLA XLA T XLA,1
29,3.0,"</Tip>

### How do I make my model XLA compatible?

In many cases, your code is probably XLA-compatible already! However, there are a few things that work in normal TensorFlow that don‚Äôt work in XLA. We‚Äôve distilled them into three core rules below:

<Tip>

**ü§óSpecific HuggingFace Tipü§ó:** We‚Äôve put a lot of effort into rewriting our TensorFlow models and loss functions to be XLA-compatible. Our models and loss functions generally obey rule #1 and #2 by default, so you can skip over them if you‚Äôre using `transformers` models. Don‚Äôt forget about these rules when writing your own models and loss functions, though!

</Tip>

#### XLA Rule #1: Your code cannot have ‚Äúdata-dependent conditionals‚Äù

What that means is that any `if` statement cannot depend on values inside a `tf.Tensor`. For example, this code block cannot be compiled with XLA!

```python
if tf.reduce_sum(tensor) > 10:
    tensor = tensor / 2.0","[{'entity_group': 'MISC', 'score': 0.73021, 'word': 'XLA', 'start': 35, 'end': 38}, {'entity_group': 'MISC', 'score': 0.91795117, 'word': 'XLA', 'start': 89, 'end': 92}, {'entity_group': 'MISC', 'score': 0.9208584, 'word': 'Ten', 'start': 165, 'end': 168}, {'entity_group': 'ORG', 'score': 0.40642112, 'word': '##Flow', 'start': 171, 'end': 175}, {'entity_group': 'MISC', 'score': 0.5960033, 'word': 'XLA', 'start': 195, 'end': 198}, {'entity_group': 'MISC', 'score': 0.74641657, 'word': 'Ten', 'start': 335, 'end': 338}, {'entity_group': 'ORG', 'score': 0.5465389, 'word': '##sorFlow', 'start': 338, 'end': 345}, {'entity_group': 'MISC', 'score': 0.94152373, 'word': 'XLA', 'start': 378, 'end': 381}, {'entity_group': 'MISC', 'score': 0.9588539, 'word': 'Ten', 'start': 779, 'end': 782}, {'entity_group': 'MISC', 'score': 0.6474595, 'word': 'XLA', 'start': 841, 'end': 844}]","[{'entity_group': 'MISC', 'score': 0.91795117, 'word': 'XLA', 'start': 89, 'end': 92}, {'entity_group': 'MISC', 'score': 0.9208584, 'word': 'Ten', 'start': 165, 'end': 168}, {'entity_group': 'MISC', 'score': 0.94152373, 'word': 'XLA', 'start': 378, 'end': 381}, {'entity_group': 'MISC', 'score': 0.9588539, 'word': 'Ten', 'start': 779, 'end': 782}]",XLA XLA Ten ##Flow XLA Ten ##sorFlow XLA Ten XLA,1
30,3.0,"```

This might seem very restrictive at first, but most neural net code doesn‚Äôt need to do this. You can often get around this restriction by using `tf.cond` (see the documentation [here](https://www.tensorflow.org/api_docs/python/tf/cond)) or by removing the conditional and finding a clever math trick with indicator variables instead, like so:

```python
sum_over_10 = tf.cast(tf.reduce_sum(tensor) > 10, tf.float32)
tensor = tensor / (1.0 + sum_over_10)","[{'entity_group': 'ORG', 'score': 0.5081252, 'word': '##flow', 'start': 207, 'end': 211}]",[],##flow,1
31,3.0,"```

This code has exactly the same effect as the code above, but by avoiding a conditional, we ensure it will compile with XLA without problems!

#### XLA Rule #2: Your code cannot have ‚Äúdata-dependent shapes‚Äù

What this means is that the shape of all of the `tf.Tensor` objects in your code cannot depend on their values. For example, the function `tf.unique` cannot be compiled with XLA, because it returns a `tensor` containing one instance of each unique value in the input. The shape of this output will obviously be different depending on how repetitive the input `Tensor` was, and so XLA refuses to handle it!","[{'entity_group': 'ORG', 'score': 0.97034204, 'word': 'XLA', 'start': 124, 'end': 127}, {'entity_group': 'ORG', 'score': 0.55680084, 'word': 'X', 'start': 152, 'end': 153}, {'entity_group': 'MISC', 'score': 0.7183528, 'word': 'Tensor', 'start': 264, 'end': 270}, {'entity_group': 'ORG', 'score': 0.97228265, 'word': 'XLA', 'start': 386, 'end': 389}, {'entity_group': 'MISC', 'score': 0.6643835, 'word': 'Ten', 'start': 572, 'end': 575}, {'entity_group': 'ORG', 'score': 0.3774883, 'word': '##sor', 'start': 575, 'end': 578}, {'entity_group': 'ORG', 'score': 0.9936136, 'word': 'XLA', 'start': 592, 'end': 595}]","[{'entity_group': 'ORG', 'score': 0.97034204, 'word': 'XLA', 'start': 124, 'end': 127}, {'entity_group': 'ORG', 'score': 0.97228265, 'word': 'XLA', 'start': 386, 'end': 389}, {'entity_group': 'ORG', 'score': 0.9936136, 'word': 'XLA', 'start': 592, 'end': 595}]",XLA X Tensor XLA Ten ##sor XLA,1
32,3.0,"In general, most neural network code obeys rule #2 by default. However, there are a few common cases where it becomes a problem. One very common one is when you use **label masking**, setting your labels to a negative value to indicate that those positions should be ignored when computing the loss. If you look at NumPy or PyTorch loss functions that support label masking, you will often see code like this that uses [boolean indexing](https://numpy.org/doc/stable/user/basics.indexing.html#boolean-array-indexing):

```python
label_mask = labels >= 0
masked_outputs = outputs[label_mask]
masked_labels = labels[label_mask]
loss = compute_loss(masked_outputs, masked_labels)
mean_loss = torch.mean(loss)","[{'entity_group': 'ORG', 'score': 0.47865447, 'word': 'N', 'start': 315, 'end': 316}, {'entity_group': 'ORG', 'score': 0.71671104, 'word': '##Py', 'start': 318, 'end': 320}, {'entity_group': 'ORG', 'score': 0.787384, 'word': 'PyTorch', 'start': 324, 'end': 331}]",[],N ##Py PyTorch,1
33,3.0,"```

This code is totally fine in NumPy or PyTorch, but it breaks in XLA! Why? Because the shape of `masked_outputs` and `masked_labels` depends on how many positions are masked - that makes it a **data-dependent shape.** However, just like for rule #1, we can often rewrite this code to yield exactly the same output without any data-dependent shapes.

```python
label_mask = tf.cast(labels >= 0, tf.float32)
loss = compute_loss(outputs, labels)
loss = loss * label_mask  # Set negative label positions to 0
mean_loss = tf.reduce_sum(loss) / tf.reduce_sum(label_mask)","[{'entity_group': 'ORG', 'score': 0.8605132, 'word': 'NumPy', 'start': 34, 'end': 39}, {'entity_group': 'ORG', 'score': 0.9463831, 'word': 'PyTorch', 'start': 43, 'end': 50}, {'entity_group': 'ORG', 'score': 0.9341048, 'word': 'XLA', 'start': 69, 'end': 72}]","[{'entity_group': 'ORG', 'score': 0.8605132, 'word': 'NumPy', 'start': 34, 'end': 39}, {'entity_group': 'ORG', 'score': 0.9463831, 'word': 'PyTorch', 'start': 43, 'end': 50}, {'entity_group': 'ORG', 'score': 0.9341048, 'word': 'XLA', 'start': 69, 'end': 72}]",NumPy PyTorch XLA,1
34,3.0,"```

Here, we avoid data-dependent shapes by computing the loss for every position, but zeroing out the masked positions in both the numerator and denominator when we calculate the mean, which yields exactly the same result as the first block while maintaining XLA compatibility. Note that we use the same trick as in rule #1 - converting a `tf.bool` to `tf.float32` and using it as an indicator variable. This is a really useful trick, so remember it if you need to convert your own code to XLA!

#### XLA Rule #3: XLA will need to recompile your model for every different input shape it sees

This is the big one. What this means is that if your input shapes are very variable, XLA will have to recompile your model over and over, which will create huge performance problems. This commonly arises in NLP models, where input texts have variable lengths after tokenization. In other modalities, static shapes are more common and this rule is much less of a problem.","[{'entity_group': 'ORG', 'score': 0.79688257, 'word': 'XLA', 'start': 261, 'end': 264}, {'entity_group': 'ORG', 'score': 0.8275237, 'word': 'XLA', 'start': 492, 'end': 495}, {'entity_group': 'ORG', 'score': 0.9945651, 'word': 'XLA', 'start': 516, 'end': 519}, {'entity_group': 'ORG', 'score': 0.993308, 'word': 'XLA', 'start': 680, 'end': 683}, {'entity_group': 'MISC', 'score': 0.72162247, 'word': 'NL', 'start': 802, 'end': 804}]","[{'entity_group': 'ORG', 'score': 0.8275237, 'word': 'XLA', 'start': 492, 'end': 495}, {'entity_group': 'ORG', 'score': 0.9945651, 'word': 'XLA', 'start': 516, 'end': 519}, {'entity_group': 'ORG', 'score': 0.993308, 'word': 'XLA', 'start': 680, 'end': 683}]",XLA XLA XLA XLA NL,1
35,3.0,"How can you get around rule #3? The key is **padding** - if you pad all your inputs to the same length, and then use an `attention_mask`, you can get the same results as you‚Äôd get from variable shapes, but without any XLA issues. However, excessive padding can cause severe slowdown too - if you pad all your samples to the maximum length in the whole dataset, you might end up with batches consisting endless padding tokens, which will waste a lot of compute and memory!

There isn‚Äôt a perfect solution to this problem. However, you can try some tricks. One very useful trick is to **pad batches of samples up to a multiple of a number like 32 or 64 tokens.** This often only increases the number of tokens by a small amount, but it hugely reduces the number of unique input shapes, because every input shape now has to be a multiple of 32 or 64. Fewer unique input shapes means fewer XLA compilations!

<Tip>","[{'entity_group': 'MISC', 'score': 0.7000652, 'word': 'X', 'start': 218, 'end': 219}, {'entity_group': 'MISC', 'score': 0.8485703, 'word': 'X', 'start': 886, 'end': 887}]","[{'entity_group': 'MISC', 'score': 0.8485703, 'word': 'X', 'start': 886, 'end': 887}]",X X,1
36,3.0,"<Tip>

**ü§óSpecific HuggingFace Tipü§ó:** Our tokenizers and data collators have methods that can help you here. You can use `padding=""max_length""` or `padding=""longest""` when calling tokenizers to get them to output padded data. Our tokenizers and data collators also have a `pad_to_multiple_of` argument that you can use to reduce the number of unique input shapes you see!

</Tip>

### How do I actually train my model on TPU?

Once your training is XLA-compatible and (if you‚Äôre using TPU Node / Colab) your dataset has been prepared appropriately, running on TPU is surprisingly easy! All you really need to change in your code is to add a few lines to initialize your TPU, and to ensure that your model and dataset are created inside a `TPUStrategy` scope. Take a look at [our TPU example notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb) to see this in action!

### Summary","[{'entity_group': 'MISC', 'score': 0.8867961, 'word': 'XLA', 'start': 450, 'end': 453}]","[{'entity_group': 'MISC', 'score': 0.8867961, 'word': 'XLA', 'start': 450, 'end': 453}]",XLA,1
37,3.0,"### Summary

There was a lot in here, so let‚Äôs summarize with a quick checklist you can follow when you want to get your model ready for TPU training:",[],[],,1
38,3.0,"- Make sure your code follows the three rules of XLA
- Compile your model with `jit_compile=True` on CPU/GPU and confirm that you can train it with XLA
- Either load your dataset into memory or use a TPU-compatible dataset loading approach (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))
- Migrate your code either to Colab (with accelerator set to ‚ÄúTPU‚Äù) or a TPU VM on Google Cloud
- Add TPU initializer code (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))
- Create your `TPUStrategy` and make sure dataset loading and model creation are inside the `strategy.scope()` (see [notebook](https://colab.research.google.com/github/huggingface/notebooks/blob/main/examples/tpu_training-tf.ipynb))
- Don‚Äôt forget to take `jit_compile=True` out again when you move to TPU!
- üôèüôèüôèü•∫ü•∫ü•∫
- Call model.fit()
- You did it!","[{'entity_group': 'MISC', 'score': 0.83520824, 'word': 'XLA', 'start': 49, 'end': 52}, {'entity_group': 'MISC', 'score': 0.67093897, 'word': 'XLA', 'start': 148, 'end': 151}, {'entity_group': 'MISC', 'score': 0.8622684, 'word': 'T', 'start': 200, 'end': 201}, {'entity_group': 'ORG', 'score': 0.45978537, 'word': 'Colab', 'start': 392, 'end': 397}, {'entity_group': 'ORG', 'score': 0.58023775, 'word': 'Google', 'start': 445, 'end': 451}, {'entity_group': 'MISC', 'score': 0.79148114, 'word': 'Cloud', 'start': 452, 'end': 457}]","[{'entity_group': 'MISC', 'score': 0.83520824, 'word': 'XLA', 'start': 49, 'end': 52}, {'entity_group': 'MISC', 'score': 0.8622684, 'word': 'T', 'start': 200, 'end': 201}]",XLA XLA T Colab Google Cloud,1
39,4.0,"Gradio Demo: blocks_random_slider


```
!pip install -q gradio 
```


```

import gradio as gr


def func(slider_1, slider_2):
    return slider_1 * 5 + slider_2


with gr.Blocks() as demo:
    slider = gr.Slider(minimum=-10.2, maximum=15, label=""Random Slider (Static)"", randomize=True)
    slider_1 = gr.Slider(minimum=100, maximum=200, label=""Random Slider (Input 1)"", randomize=True)
    slider_2 = gr.Slider(minimum=10, maximum=23.2, label=""Random Slider (Input 2)"", randomize=True)
    slider_3 = gr.Slider(value=3, label=""Non random slider"")
    btn = gr.Button(""Run"")
    btn.click(func, inputs=[slider_1, slider_2], outputs=gr.Number())

if __name__ == ""__main__"":
    demo.launch()

```",[],[],,1
40,5.0,"Git over SSH

You can access and write data in repositories on huggingface.co using SSH (Secure Shell Protocol). When you connect via SSH, you authenticate using a private key file on your local machine.

Some actions, such as pushing changes, or cloning private repositories, will require you to upload your SSH public key to your account on huggingface.co.

You can use a pre-existing SSH key, or generate a new one specifically for huggingface.co.

## Checking for existing SSH keys

If you have an existing SSH key, you can use that key to authenticate Git operations over SSH.

SSH keys are usually located under `~/.ssh` on Mac & Linux, and under `C:\\Users\\<username>\\.ssh` on Windows. List files under that directory and look for files of the form:

- id_rsa.pub
- id_ecdsa.pub
- id_ed25519.pub

Those files contain your SSH public key.","[{'entity_group': 'MISC', 'score': 0.92113197, 'word': 'SS', 'start': 9, 'end': 11}, {'entity_group': 'MISC', 'score': 0.9589257, 'word': 'SSH', 'start': 84, 'end': 87}, {'entity_group': 'MISC', 'score': 0.9572897, 'word': 'Secure Shell Protocol', 'start': 89, 'end': 110}, {'entity_group': 'MISC', 'score': 0.80688643, 'word': 'SSH', 'start': 134, 'end': 137}, {'entity_group': 'MISC', 'score': 0.80434084, 'word': 'SS', 'start': 309, 'end': 311}, {'entity_group': 'MISC', 'score': 0.48369598, 'word': 'SS', 'start': 477, 'end': 479}, {'entity_group': 'MISC', 'score': 0.6529105, 'word': 'SS', 'start': 511, 'end': 513}, {'entity_group': 'MISC', 'score': 0.52346647, 'word': 'G', 'start': 557, 'end': 558}, {'entity_group': 'ORG', 'score': 0.4547866, 'word': '##it', 'start': 558, 'end': 560}, {'entity_group': 'MISC', 'score': 0.8001829, 'word': 'SSH', 'start': 577, 'end': 580}, {'entity_group': 'MISC', 'score': 0.6838704, 'word': 'SS', 'start': 583, 'end': 585}, {'entity_group': 'LOC', 'score': 0.466833, 'word': 'Mac', 'start': 630, 'end': 633}, {'entity_group': 'LOC', 'score': 0.66893256, 'word': 'Linux', 'start': 636, 'end': 641}, {'entity_group': 'MISC', 'score': 0.4567379, 'word': 'C', 'start': 654, 'end': 655}, {'entity_group': 'MISC', 'score': 0.5781497, 'word': 'Windows', 'start': 686, 'end': 693}, {'entity_group': 'MISC', 'score': 0.7891859, 'word': 'SS', 'start': 831, 'end': 833}]","[{'entity_group': 'MISC', 'score': 0.92113197, 'word': 'SS', 'start': 9, 'end': 11}, {'entity_group': 'MISC', 'score': 0.9589257, 'word': 'SSH', 'start': 84, 'end': 87}, {'entity_group': 'MISC', 'score': 0.9572897, 'word': 'Secure Shell Protocol', 'start': 89, 'end': 110}, {'entity_group': 'MISC', 'score': 0.80688643, 'word': 'SSH', 'start': 134, 'end': 137}, {'entity_group': 'MISC', 'score': 0.80434084, 'word': 'SS', 'start': 309, 'end': 311}, {'entity_group': 'MISC', 'score': 0.8001829, 'word': 'SSH', 'start': 577, 'end': 580}]",SS SSH Secure Shell Protocol SSH SS SS SS G ##it SSH SS Mac Linux C Windows SS,3
41,5.0,"- id_rsa.pub
- id_ecdsa.pub
- id_ed25519.pub

Those files contain your SSH public key.

If you don't have such file under `~/.ssh`, you will have to [generate a new key](#generating-a-new-ssh-keypair). Otherwise, you can [add your existing SSH public key(s) to your huggingface.co account](#add-a-ssh-key-to-your-account).

## Generating a new SSH keypair

If you don't have any SSH keys on your machine, you can use `ssh-keygen` to generate a new SSH key pair (public + private keys):","[{'entity_group': 'MISC', 'score': 0.91001666, 'word': 'SS', 'start': 71, 'end': 73}, {'entity_group': 'ORG', 'score': 0.5961126, 'word': '##face', 'start': 273, 'end': 277}, {'entity_group': 'ORG', 'score': 0.80565673, 'word': 'co', 'start': 278, 'end': 280}, {'entity_group': 'MISC', 'score': 0.6658475, 'word': 'SS', 'start': 379, 'end': 381}]","[{'entity_group': 'MISC', 'score': 0.91001666, 'word': 'SS', 'start': 71, 'end': 73}, {'entity_group': 'ORG', 'score': 0.80565673, 'word': 'co', 'start': 278, 'end': 280}]",SS ##face co SS,3
42,5.0,"```
$ ssh-keygen -t ed25519 -C ""your.email@example.co""
```

We recommend entering a passphrase when you are prompted to. A passphrase is an extra layer of security: it is a password that will be prompted whenever you use your SSH key.

Once your new key is generated, add it to your SSH agent with `ssh-add`:

```
$ ssh-add ~/.ssh/id_ed25519",[],[],,1
43,5.0,"```

If you chose a different location than the default to store your SSH key, you would have to replace `~/.ssh/id_ed25519` with the file location you used.

## Add a SSH key to your account

To access private repositories with SSH, or to push changes via SSH, you will need to add your SSH public key to your huggingface.co account. You can manage your SSH keys [in your user settings](https://huggingface.co/settings/keys).

To add a SSH key to your account, click on the ""Add SSH key"" button.

Then, enter a name for this key (for example, ""Personal computer""), and copy and paste the content of your **public** SSH key in the area below. The public key is located in the `~/.ssh/id_XXXX.pub` file you found or generated in the previous steps.

Click on ""Add key"", and voil√†! You have added a SSH key to your huggingface.co account.


## Testing your SSH authentication

Once you have added your SSH key to your huggingface.co account, you can test that the connection works as expected.","[{'entity_group': 'MISC', 'score': 0.58076006, 'word': 'SS', 'start': 70, 'end': 72}, {'entity_group': 'MISC', 'score': 0.6933179, 'word': 'SS', 'start': 168, 'end': 170}, {'entity_group': 'MISC', 'score': 0.91704464, 'word': 'SS', 'start': 229, 'end': 231}, {'entity_group': 'MISC', 'score': 0.8939225, 'word': 'SS', 'start': 257, 'end': 259}, {'entity_group': 'MISC', 'score': 0.5372166, 'word': 'SS', 'start': 288, 'end': 290}, {'entity_group': 'ORG', 'score': 0.9379524, 'word': '##face', 'start': 318, 'end': 322}, {'entity_group': 'ORG', 'score': 0.9172892, 'word': 'co', 'start': 323, 'end': 325}, {'entity_group': 'ORG', 'score': 0.8731152, 'word': '##face', 'start': 820, 'end': 824}, {'entity_group': 'ORG', 'score': 0.8278317, 'word': 'co', 'start': 825, 'end': 827}, {'entity_group': 'MISC', 'score': 0.8799917, 'word': 'SS', 'start': 855, 'end': 857}, {'entity_group': 'ORG', 'score': 0.87976456, 'word': '##face', 'start': 923, 'end': 927}, {'entity_group': 'ORG', 'score': 0.84073704, 'word': 'co', 'start': 928, 'end': 930}]","[{'entity_group': 'MISC', 'score': 0.91704464, 'word': 'SS', 'start': 229, 'end': 231}, {'entity_group': 'MISC', 'score': 0.8939225, 'word': 'SS', 'start': 257, 'end': 259}, {'entity_group': 'ORG', 'score': 0.9379524, 'word': '##face', 'start': 318, 'end': 322}, {'entity_group': 'ORG', 'score': 0.9172892, 'word': 'co', 'start': 323, 'end': 325}, {'entity_group': 'ORG', 'score': 0.8731152, 'word': '##face', 'start': 820, 'end': 824}, {'entity_group': 'ORG', 'score': 0.8278317, 'word': 'co', 'start': 825, 'end': 827}, {'entity_group': 'MISC', 'score': 0.8799917, 'word': 'SS', 'start': 855, 'end': 857}, {'entity_group': 'ORG', 'score': 0.87976456, 'word': '##face', 'start': 923, 'end': 927}, {'entity_group': 'ORG', 'score': 0.84073704, 'word': 'co', 'start': 928, 'end': 930}]",SS SS SS SS SS ##face co ##face co SS ##face co,3
44,5.0,"In a terminal, run:",[],[],,1
45,5.0,"```
$ ssh -T git@hf.co
```

If you see a message with your username, congrats! Everything went well, you are ready to use git over SSH.

Otherwise, if the message states something like the following, make sure your SSH key is actually used by your SSH agent.
```
Hi anonymous, welcome to Hugging Face.
```","[{'entity_group': 'MISC', 'score': 0.4859285, 'word': 'SS', 'start': 131, 'end': 133}, {'entity_group': 'ORG', 'score': 0.52203995, 'word': 'Hu', 'start': 288, 'end': 290}, {'entity_group': 'ORG', 'score': 0.6640534, 'word': 'Face', 'start': 296, 'end': 300}]",[],SS Hu Face,0
46,6.0,"!---
Copyright 2022 The HuggingFace Team. All rights reserved.

Licensed under the Apache License, Version 2.0 (the ""License"");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an ""AS IS"" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
-->

# Token classification with LayoutLMv3 (PyTorch version)

This directory contains a script, `run_funsd_cord.py`, that can be used to fine-tune (or evaluate) LayoutLMv3 on form understanding datasets, such as [FUNSD](https://guillaumejaume.github.io/FUNSD/) and [CORD](https://github.com/clovaai/cord).","[{'entity_group': 'ORG', 'score': 0.9903394, 'word': 'HuggingFace Team', 'start': 24, 'end': 40}, {'entity_group': 'MISC', 'score': 0.9964517, 'word': 'Apache License', 'start': 83, 'end': 97}, {'entity_group': 'MISC', 'score': 0.5311333, 'word': '2', 'start': 107, 'end': 108}, {'entity_group': 'MISC', 'score': 0.99231684, 'word': 'License', 'start': 117, 'end': 124}, {'entity_group': 'MISC', 'score': 0.9904005, 'word': 'License', 'start': 184, 'end': 191}, {'entity_group': 'MISC', 'score': 0.9843187, 'word': 'License', 'start': 222, 'end': 229}, {'entity_group': 'ORG', 'score': 0.7233833, 'word': '##pache', 'start': 250, 'end': 255}, {'entity_group': 'MISC', 'score': 0.43589893, 'word': '##IC', 'start': 270, 'end': 272}, {'entity_group': 'MISC', 'score': 0.98465794, 'word': 'License', 'start': 372, 'end': 379}, {'entity_group': 'MISC', 'score': 0.9908751, 'word': 'License', 'start': 497, 'end': 504}, {'entity_group': 'MISC', 'score': 0.9914825, 'word': 'License', 'start': 579, 'end': 586}, {'entity_group': 'MISC', 'score': 0.5479137, 'word': '##LM', 'start': 627, 'end': 629}, {'entity_group': 'ORG', 'score': 0.46583357, 'word': 'P', 'start': 633, 'end': 634}, {'entity_group': 'ORG', 'score': 0.77076787, 'word': '##Torch', 'start': 635, 'end': 640}, {'entity_group': 'MISC', 'score': 0.470389, 'word': 'Lay', 'start': 750, 'end': 753}, {'entity_group': 'MISC', 'score': 0.6353152, 'word': '##LM', 'start': 756, 'end': 758}]","[{'entity_group': 'ORG', 'score': 0.9903394, 'word': 'HuggingFace Team', 'start': 24, 'end': 40}, {'entity_group': 'MISC', 'score': 0.9964517, 'word': 'Apache License', 'start': 83, 'end': 97}, {'entity_group': 'MISC', 'score': 0.99231684, 'word': 'License', 'start': 117, 'end': 124}, {'entity_group': 'MISC', 'score': 0.9904005, 'word': 'License', 'start': 184, 'end': 191}, {'entity_group': 'MISC', 'score': 0.9843187, 'word': 'License', 'start': 222, 'end': 229}, {'entity_group': 'MISC', 'score': 0.98465794, 'word': 'License', 'start': 372, 'end': 379}, {'entity_group': 'MISC', 'score': 0.9908751, 'word': 'License', 'start': 497, 'end': 504}, {'entity_group': 'MISC', 'score': 0.9914825, 'word': 'License', 'start': 579, 'end': 586}]",HuggingFace Team Apache License 2 License License License ##pache ##IC License License License ##LM P ##Torch Lay ##LM,1
47,6.0,"The script `run_funsd_cord.py` leverages the ü§ó Datasets library and the Trainer API. You can easily customize it to your needs.

## Fine-tuning on FUNSD

Fine-tuning LayoutLMv3 for token classification on [FUNSD](https://guillaumejaume.github.io/FUNSD/) can be done as follows:

```bash
python run_funsd_cord.py \
  --model_name_or_path microsoft/layoutlmv3-base \
  --dataset_name funsd \
  --output_dir layoutlmv3-test \
  --do_train \
  --do_eval \
  --max_steps 1000 \
  --evaluation_strategy steps \
  --eval_steps 100 \
  --learning_rate 1e-5 \
  --load_best_model_at_end \
  --metric_for_best_model ""eval_f1"" \
  --push_to_hub \
  --push_to_hub¬∞model_id layoutlmv3-finetuned-funsd","[{'entity_group': 'ORG', 'score': 0.5683371, 'word': 'ü§ó Data', 'start': 45, 'end': 51}, {'entity_group': 'ORG', 'score': 0.57455164, 'word': 'Trainer', 'start': 72, 'end': 79}, {'entity_group': 'MISC', 'score': 0.46169198, 'word': 'API', 'start': 80, 'end': 83}, {'entity_group': 'ORG', 'score': 0.5101511, 'word': 'FUN', 'start': 147, 'end': 150}, {'entity_group': 'MISC', 'score': 0.38683942, 'word': '##SD', 'start': 150, 'end': 152}, {'entity_group': 'ORG', 'score': 0.5015076, 'word': 'FUN', 'start': 206, 'end': 209}, {'entity_group': 'MISC', 'score': 0.4563982, 'word': '##SD', 'start': 209, 'end': 211}, {'entity_group': 'ORG', 'score': 0.5117393, 'word': '##uil', 'start': 222, 'end': 225}, {'entity_group': 'ORG', 'score': 0.44537678, 'word': 'FUNSD', 'start': 246, 'end': 251}]",[],ü§ó Data Trainer API FUN ##SD FUN ##SD ##uil FUNSD,1
48,6.0,"```

üëÄ The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd. By specifying the `push_to_hub` flag, the model gets uploaded automatically to the hub (regularly), together with a model card, which includes metrics such as precision, recall and F1. Note that you can easily update the model card, as it's just a README file of the respective repo on the hub.

There's also the ""Training metrics"" [tab](https://huggingface.co/nielsr/layoutlmv3-finetuned-funsd/tensorboard), which shows Tensorboard logs over the course of training. Pretty neat, huh?

## Fine-tuning on CORD

Fine-tuning LayoutLMv3 for token classification on [CORD](https://github.com/clovaai/cord) can be done as follows:","[{'entity_group': 'MISC', 'score': 0.95955044, 'word': 'F1', 'start': 285, 'end': 287}, {'entity_group': 'ORG', 'score': 0.9514254, 'word': 'Tensorboard', 'start': 525, 'end': 536}]","[{'entity_group': 'MISC', 'score': 0.95955044, 'word': 'F1', 'start': 285, 'end': 287}, {'entity_group': 'ORG', 'score': 0.9514254, 'word': 'Tensorboard', 'start': 525, 'end': 536}]",F1 Tensorboard,1
49,6.0,"```bash
python run_funsd_cord.py \
  --model_name_or_path microsoft/layoutlmv3-base \
  --dataset_name cord \
  --output_dir layoutlmv3-test \
  --do_train \
  --do_eval \
  --max_steps 1000 \
  --evaluation_strategy steps \
  --eval_steps 100 \
  --learning_rate 5e-5 \
  --load_best_model_at_end \
  --metric_for_best_model ""eval_f1"" \
  --push_to_hub \
  --push_to_hub¬∞model_id layoutlmv3-finetuned-cord",[],[],,1
50,6.0,"```

üëÄ The resulting model can be found here: https://huggingface.co/nielsr/layoutlmv3-finetuned-cord. Note that a model card gets generated automatically in case you specify the `push_to_hub` flag.",[],[],,1
51,7.0,"State in Blocks

We covered [State in Interfaces](https://gradio.app/interface-state), this guide takes a look at state in Blocks, which works mostly the same.

## Global State

Global state in Blocks works the same as in Interface. Any variable created outside a function call is a reference shared between all users.

## Session State

Gradio supports session **state**, where data persists across multiple submits within a page session, in Blocks apps as well. To reiterate, session data is _not_ shared between different users of your model. To store data in a session state, you need to do three things:

1. Create a `gr.State()` object. If there is a default value to this stateful object, pass that into the constructor.
2. In the event listener, put the `State` object as an input and output.
3. In the event listener function, add the variable to the input parameters and the return value.

Let's take a look at a game of hangman.

$code_hangman
$demo_hangman","[{'entity_group': 'MISC', 'score': 0.5216454, 'word': 'Block', 'start': 9, 'end': 14}, {'entity_group': 'MISC', 'score': 0.49693754, 'word': 'Inter', 'start': 38, 'end': 43}, {'entity_group': 'MISC', 'score': 0.67609066, 'word': 'Block', 'start': 123, 'end': 128}, {'entity_group': 'MISC', 'score': 0.6303117, 'word': 'Block', 'start': 194, 'end': 199}, {'entity_group': 'MISC', 'score': 0.5210694, 'word': 'Interface', 'start': 222, 'end': 231}, {'entity_group': 'ORG', 'score': 0.8068902, 'word': 'Gradio', 'start': 338, 'end': 344}, {'entity_group': 'MISC', 'score': 0.5927224, 'word': 'Block', 'start': 443, 'end': 448}]","[{'entity_group': 'ORG', 'score': 0.8068902, 'word': 'Gradio', 'start': 338, 'end': 344}]",Block Inter Block Block Interface Gradio Block,1
52,7.0,"Let's take a look at a game of hangman.

$code_hangman
$demo_hangman

Let's see how we do each of the 3 steps listed above in this game:

1. We store the used letters in `used_letters_var`. In the constructor of `State`, we set the initial value of this to `[]`, an empty list.
2. In `btn.click()`, we have a reference to `used_letters_var` in both the inputs and outputs.
3. In `guess_letter`, we pass the value of this `State` to `used_letters`, and then return an updated value of this `State` in the return statement.

With more complex apps, you will likely have many State variables storing session state in a single Blocks app.

Learn more about `State` in the [docs](https://gradio.app/docs#state).","[{'entity_group': 'MISC', 'score': 0.8323638, 'word': 'State', 'start': 213, 'end': 218}, {'entity_group': 'ORG', 'score': 0.88383853, 'word': 'Blocks', 'start': 623, 'end': 629}, {'entity_group': 'MISC', 'score': 0.48590425, 'word': 'State', 'start': 654, 'end': 659}]","[{'entity_group': 'MISC', 'score': 0.8323638, 'word': 'State', 'start': 213, 'end': 218}, {'entity_group': 'ORG', 'score': 0.88383853, 'word': 'Blocks', 'start': 623, 'end': 629}]",State Blocks State,1
53,8.0,"Â¶Ç‰Ωï‰ΩøÁî®Âú∞ÂõæÁªÑ‰ª∂ÁªòÂà∂ÂõæË°®

Related spaces:
Tags: PLOTS, MAPS

## ÁÆÄ‰ªã

Êú¨ÊåáÂçó‰ªãÁªçÂ¶Ç‰Ωï‰ΩøÁî® Gradio ÁöÑ `Plot` ÁªÑ‰ª∂Âú®Âú∞Âõæ‰∏äÁªòÂà∂Âú∞ÁêÜÊï∞ÊçÆ„ÄÇGradio ÁöÑ `Plot` ÁªÑ‰ª∂ÂèØ‰ª•‰∏é Matplotlib„ÄÅBokeh Âíå Plotly ‰∏ÄËµ∑‰ΩøÁî®„ÄÇÂú®Êú¨ÊåáÂçó‰∏≠ÔºåÊàë‰ª¨Â∞Ü‰ΩøÁî® Plotly ËøõË°åÊìç‰Ωú„ÄÇPlotly ÂèØ‰ª•ËÆ©ÂºÄÂèë‰∫∫ÂëòËΩªÊùæÂàõÂª∫ÂêÑÁßçÂú∞ÂõæÊù•Â±ïÁ§∫‰ªñ‰ª¨ÁöÑÂú∞ÁêÜÊï∞ÊçÆ„ÄÇÁÇπÂáª[ËøôÈáå](https://plotly.com/python/maps/)Êü•Áúã‰∏Ä‰∫õÁ§∫‰æã„ÄÇ

## Ê¶ÇËø∞

Êàë‰ª¨Â∞Ü‰ΩøÁî®Á∫ΩÁ∫¶Â∏ÇÁöÑ Airbnb Êï∞ÊçÆÈõÜÔºåËØ•Êï∞ÊçÆÈõÜÊâòÁÆ°Âú® kaggle ‰∏äÔºåÁÇπÂáª[ËøôÈáå](https://www.kaggle.com/datasets/dgomonov/new-york-city-airbnb-open-data)„ÄÇÊàëÂ∑≤ÁªèÂ∞ÜÂÖ∂‰∏ä‰º†Âà∞ Hugging Face Hub ‰Ωú‰∏∫‰∏Ä‰∏™Êï∞ÊçÆÈõÜÔºåÊñπ‰æø‰ΩøÁî®Âíå‰∏ãËΩΩÔºåÁÇπÂáª[ËøôÈáå](https://huggingface.co/datasets/gradio/NYC-Airbnb-Open-Data)„ÄÇ‰ΩøÁî®Ëøô‰∫õÊï∞ÊçÆÔºåÊàë‰ª¨Â∞ÜÂú®Âú∞Âõæ‰∏äÁªòÂà∂ Airbnb ÁöÑ‰ΩçÁΩÆÔºåÂπ∂ÂÖÅËÆ∏Âü∫‰∫é‰ª∑Ê†ºÂíå‰ΩçÁΩÆËøõË°åÁ≠õÈÄâ„ÄÇ‰∏ãÈù¢ÊòØÊàë‰ª¨Â∞ÜË¶ÅÊûÑÂª∫ÁöÑÊºîÁ§∫„ÄÇ ‚ö°Ô∏è

$demo_map_airbnb

## Ê≠•È™§ 1-Âä†ËΩΩ CSV Êï∞ÊçÆ üíæ

ËÆ©Êàë‰ª¨È¶ñÂÖà‰ªé Hugging Face Hub Âä†ËΩΩÁ∫ΩÁ∫¶Â∏ÇÁöÑ Airbnb Êï∞ÊçÆ„ÄÇ

```python
from datasets import load_dataset

dataset = load_dataset(""gradio/NYC-Airbnb-Open-Data"", split=""train"")
df = dataset.to_pandas()","[{'entity_group': 'ORG', 'score': 0.67459077, 'word': 'Mat', 'start': 117, 'end': 120}, {'entity_group': 'ORG', 'score': 0.71341294, 'word': 'Bokeh', 'start': 128, 'end': 133}, {'entity_group': 'ORG', 'score': 0.77606416, 'word': 'Airb', 'start': 270, 'end': 274}, {'entity_group': 'ORG', 'score': 0.61729467, 'word': '##b', 'start': 275, 'end': 276}, {'entity_group': 'ORG', 'score': 0.5710866, 'word': '##ggle', 'start': 319, 'end': 323}, {'entity_group': 'LOC', 'score': 0.57174313, 'word': '##rk', 'start': 352, 'end': 354}, {'entity_group': 'ORG', 'score': 0.45367315, 'word': 'Face', 'start': 395, 'end': 399}, {'entity_group': 'ORG', 'score': 0.5066892, 'word': 'co', 'start': 447, 'end': 449}, {'entity_group': 'ORG', 'score': 0.42661583, 'word': 'NYC', 'start': 466, 'end': 469}, {'entity_group': 'ORG', 'score': 0.664265, 'word': 'Air', 'start': 470, 'end': 473}, {'entity_group': 'ORG', 'score': 0.8470244, 'word': 'Airb', 'start': 505, 'end': 509}, {'entity_group': 'ORG', 'score': 0.82480043, 'word': '##b', 'start': 510, 'end': 511}, {'entity_group': 'ORG', 'score': 0.6933624, 'word': 'CS', 'start': 578, 'end': 580}, {'entity_group': 'ORG', 'score': 0.59686357, 'word': 'NYC', 'start': 707, 'end': 710}]","[{'entity_group': 'ORG', 'score': 0.8470244, 'word': 'Airb', 'start': 505, 'end': 509}, {'entity_group': 'ORG', 'score': 0.82480043, 'word': '##b', 'start': 510, 'end': 511}]",Mat Bokeh Airb ##b ##ggle ##rk Face co NYC Air Airb ##b CS NYC,1
54,8.0,"dataset = load_dataset(""gradio/NYC-Airbnb-Open-Data"", split=""train"")
df = dataset.to_pandas()

def filter_map(min_price, max_price, boroughs):
    new_df = df[(df['neighbourhood_group'].isin(boroughs)) &
            (df['price'] > min_price) & (df['price'] < max_price)]
    names = new_df[""name""].tolist()
    prices = new_df[""price""].tolist()
    text_list = [(names[i], prices[i]) for i in range(0, len(names))]","[{'entity_group': 'LOC', 'score': 0.8122285, 'word': 'NYC', 'start': 31, 'end': 34}, {'entity_group': 'ORG', 'score': 0.48598766, 'word': 'Air', 'start': 35, 'end': 38}, {'entity_group': 'ORG', 'score': 0.56250465, 'word': '##b', 'start': 40, 'end': 41}]","[{'entity_group': 'LOC', 'score': 0.8122285, 'word': 'NYC', 'start': 31, 'end': 34}]",NYC Air ##b,1
55,8.0,"```

Âú®‰∏äÈù¢ÁöÑ‰ª£Á†Å‰∏≠ÔºåÊàë‰ª¨ÂÖàÂ∞Ü CSV Êï∞ÊçÆÂä†ËΩΩÂà∞‰∏Ä‰∏™ pandas dataframe ‰∏≠„ÄÇËÆ©Êàë‰ª¨È¶ñÂÖàÂÆö‰πâ‰∏Ä‰∏™ÂáΩÊï∞ÔºåËøôÂ∞Ü‰Ωú‰∏∫ gradio Â∫îÁî®Á®ãÂ∫èÁöÑÈ¢ÑÊµãÂáΩÊï∞„ÄÇËØ•ÂáΩÊï∞Â∞ÜÊé•ÂèóÊúÄ‰Ωé‰ª∑Ê†º„ÄÅÊúÄÈ´ò‰ª∑Ê†ºËåÉÂõ¥ÂíåÁ≠õÈÄâÁªìÊûúÂú∞Âå∫ÁöÑÂàóË°®‰Ωú‰∏∫ÂèÇÊï∞„ÄÇÊàë‰ª¨ÂèØ‰ª•‰ΩøÁî®‰º†ÂÖ•ÁöÑÂÄº (`min_price`„ÄÅ`max_price` ÂíåÂú∞Âå∫ÂàóË°®) Êù•Á≠õÈÄâÊï∞ÊçÆÊ°ÜÂπ∂ÂàõÂª∫ `new_df`„ÄÇÊé•‰∏ãÊù•ÔºåÊàë‰ª¨Â∞ÜÂàõÂª∫ÂåÖÂê´ÊØè‰∏™ Airbnb ÁöÑÂêçÁß∞Âíå‰ª∑Ê†ºÁöÑ `text_list`Ôºå‰ª•‰æøÂú®Âú∞Âõæ‰∏ä‰ΩøÁî®‰Ωú‰∏∫Ê†áÁ≠æ„ÄÇ

## Ê≠•È™§ 2-Âú∞ÂõæÂõæË°® üåê

Plotly ‰ΩøÂæóÂ§ÑÁêÜÂú∞ÂõæÂèòÂæóÂæàÂÆπÊòì„ÄÇËÆ©Êàë‰ª¨Áúã‰∏Ä‰∏ã‰∏ãÈù¢ÁöÑ‰ª£Á†ÅÔºå‰∫ÜËß£Â¶Ç‰ΩïÂàõÂª∫Âú∞ÂõæÂõæË°®„ÄÇ

```python
import plotly.graph_objects as go

fig = go.Figure(go.Scattermapbox(
            customdata=text_list,
            lat=new_df['latitude'].tolist(),
            lon=new_df['longitude'].tolist(),
            mode='markers',
            marker=go.scattermapbox.Marker(
                size=6
            ),
            hoverinfo=""text"",
            hovertemplate='<b>Name</b>: %{customdata[0]}<br><b>Price</b>: $%{customdata[1]}'
        ))

fig.update_layout(
    mapbox_style=""open-street-map"",
    hovermode='closest',
    mapbox=dict(
        bearing=0,
        center=go.layout.mapbox.Center(
            lat=40.67,
            lon=-73.90
        ),
        pitch=0,
        zoom=9
    ),
)","[{'entity_group': 'ORG', 'score': 0.8819684, 'word': 'CSV', 'start': 18, 'end': 21}, {'entity_group': 'ORG', 'score': 0.7685325, 'word': 'Airb', 'start': 191, 'end': 195}, {'entity_group': 'ORG', 'score': 0.9342375, 'word': '##b', 'start': 196, 'end': 197}]","[{'entity_group': 'ORG', 'score': 0.8819684, 'word': 'CSV', 'start': 18, 'end': 21}, {'entity_group': 'ORG', 'score': 0.9342375, 'word': '##b', 'start': 196, 'end': 197}]",CSV Airb ##b,1
56,8.0,"```

‰∏äÈù¢ÁöÑ‰ª£Á†Å‰∏≠ÔºåÊàë‰ª¨ÈÄöËøá‰º†ÂÖ•ÁªèÁ∫¨Â∫¶ÂàóË°®Êù•ÂàõÂª∫‰∏Ä‰∏™Êï£ÁÇπÂõæ„ÄÇÊàë‰ª¨Ëøò‰º†ÂÖ•‰∫ÜÂêçÁß∞Âíå‰ª∑Ê†ºÁöÑËá™ÂÆö‰πâÊï∞ÊçÆÔºå‰ª•‰æøÂú®Èº†Ê†áÊÇ¨ÂÅúÂú®ÊØè‰∏™Ê†áËÆ∞‰∏äÊó∂ÊòæÁ§∫È¢ùÂ§ñÁöÑ‰ø°ÊÅØ„ÄÇÊé•‰∏ãÊù•ÔºåÊàë‰ª¨‰ΩøÁî® `update_layout` Êù•ÊåáÂÆöÂÖ∂‰ªñÂú∞ÂõæËÆæÁΩÆÔºå‰æãÂ¶ÇÁº©ÊîæÂíåÂ±Ö‰∏≠„ÄÇ

ÊúâÂÖ≥‰ΩøÁî® Mapbox Âíå Plotly ÂàõÂª∫Êï£ÁÇπÂõæÁöÑÊõ¥Â§ö‰ø°ÊÅØÔºåËØ∑ÁÇπÂáª[ËøôÈáå](https://plotly.com/python/scattermapbox/)„ÄÇ

## Ê≠•È™§ 3-Gradio Â∫îÁî®Á®ãÂ∫è ‚ö°Ô∏è

Êàë‰ª¨Â∞Ü‰ΩøÁî®‰∏§‰∏™ `gr.Number` ÁªÑ‰ª∂Âíå‰∏Ä‰∏™ `gr.CheckboxGroup` ÁªÑ‰ª∂ÔºåÂÖÅËÆ∏Áî®Êà∑ÊåáÂÆö‰ª∑Ê†ºËåÉÂõ¥ÂíåÂú∞Âå∫‰ΩçÁΩÆ„ÄÇÁÑ∂ÂêéÔºåÊàë‰ª¨Â∞Ü‰ΩøÁî® `gr.Plot` ÁªÑ‰ª∂‰Ωú‰∏∫Êàë‰ª¨‰πãÂâçÂàõÂª∫ÁöÑ Plotly + Mapbox Âú∞ÂõæÁöÑËæìÂá∫„ÄÇ

```python
with gr.Blocks() as demo:
    with gr.Column():
        with gr.Row():
            min_price = gr.Number(value=250, label=""Minimum Price"")
            max_price = gr.Number(value=1000, label=""Maximum Price"")
        boroughs = gr.CheckboxGroup(choices=[""Queens"", ""Brooklyn"", ""Manhattan"", ""Bronx"", ""Staten Island""], value=[""Queens"", ""Brooklyn""], label=""Select Boroughs:"")
        btn = gr.Button(value=""Update Filter"")
        map = gr.Plot()
    demo.load(filter_map, [min_price, max_price, boroughs], map)
    btn.click(filter_map, [min_price, max_price, boroughs], map)","[{'entity_group': 'ORG', 'score': 0.47500408, 'word': 'Âíå', 'start': 129, 'end': 130}, {'entity_group': 'ORG', 'score': 0.6713374, 'word': 'CheckboxG', 'start': 255, 'end': 264}, {'entity_group': 'ORG', 'score': 0.8447758, 'word': 'Mapbox', 'start': 329, 'end': 335}, {'entity_group': 'ORG', 'score': 0.7104923, 'word': 'CheckboxGroup', 'start': 584, 'end': 597}, {'entity_group': 'LOC', 'score': 0.9903971, 'word': 'Queens', 'start': 608, 'end': 614}, {'entity_group': 'LOC', 'score': 0.99008733, 'word': 'Brooklyn', 'start': 618, 'end': 626}, {'entity_group': 'LOC', 'score': 0.993874, 'word': 'Manhattan', 'start': 630, 'end': 639}, {'entity_group': 'LOC', 'score': 0.9902929, 'word': 'Bronx', 'start': 643, 'end': 648}, {'entity_group': 'LOC', 'score': 0.99649155, 'word': 'Staten Island', 'start': 652, 'end': 665}, {'entity_group': 'LOC', 'score': 0.9918699, 'word': 'Queens', 'start': 677, 'end': 683}, {'entity_group': 'LOC', 'score': 0.99189293, 'word': 'Brooklyn', 'start': 687, 'end': 695}]","[{'entity_group': 'ORG', 'score': 0.8447758, 'word': 'Mapbox', 'start': 329, 'end': 335}, {'entity_group': 'LOC', 'score': 0.9903971, 'word': 'Queens', 'start': 608, 'end': 614}, {'entity_group': 'LOC', 'score': 0.99008733, 'word': 'Brooklyn', 'start': 618, 'end': 626}, {'entity_group': 'LOC', 'score': 0.993874, 'word': 'Manhattan', 'start': 630, 'end': 639}, {'entity_group': 'LOC', 'score': 0.9902929, 'word': 'Bronx', 'start': 643, 'end': 648}, {'entity_group': 'LOC', 'score': 0.99649155, 'word': 'Staten Island', 'start': 652, 'end': 665}, {'entity_group': 'LOC', 'score': 0.9918699, 'word': 'Queens', 'start': 677, 'end': 683}, {'entity_group': 'LOC', 'score': 0.99189293, 'word': 'Brooklyn', 'start': 687, 'end': 695}]",Âíå CheckboxG Mapbox CheckboxGroup Queens Brooklyn Manhattan Bronx Staten Island Queens Brooklyn,1
57,8.0,"```

Êàë‰ª¨‰ΩøÁî® `gr.Column` Âíå `gr.Row` Â∏ÉÂ±ÄËøô‰∫õÁªÑ‰ª∂ÔºåÂπ∂‰∏∫ÊºîÁ§∫Âä†ËΩΩÊó∂ÂíåÁÇπÂáª "" Êõ¥Êñ∞Á≠õÈÄâ "" ÊåâÈíÆÊó∂Ê∑ªÂä†‰∫Ü‰∫ã‰ª∂Ëß¶ÂèëÂô®Ôºå‰ª•Ëß¶ÂèëÂú∞ÂõæÊõ¥Êñ∞Êñ∞ÁöÑÁ≠õÈÄâÊù°‰ª∂„ÄÇ

‰ª•‰∏ãÊòØÂÆåÊï¥ÊºîÁ§∫‰ª£Á†ÅÔºö

$code_map_airbnb

## Ê≠•È™§ 4-ÈÉ®ÁΩ≤ Deployment ü§ó

Â¶ÇÊûú‰Ω†ËøêË°å‰∏äÈù¢ÁöÑ‰ª£Á†ÅÔºå‰Ω†ÁöÑÂ∫îÁî®Á®ãÂ∫èÂ∞ÜÂú®Êú¨Âú∞ËøêË°å„ÄÇ
Â¶ÇÊûúË¶ÅËé∑Âèñ‰∏¥Êó∂ÂÖ±‰∫´ÈìæÊé•ÔºåÂèØ‰ª•Â∞Ü `share=True` ÂèÇÊï∞‰º†ÈÄíÁªô `launch`„ÄÇ

‰ΩÜÂ¶ÇÊûú‰Ω†ÊÉ≥Ë¶Å‰∏Ä‰∏™Ê∞∏‰πÖÁöÑÈÉ®ÁΩ≤Ëß£ÂÜ≥ÊñπÊ°àÂë¢Ôºü
ËÆ©Êàë‰ª¨Â∞ÜÊàë‰ª¨ÁöÑ Gradio Â∫îÁî®Á®ãÂ∫èÈÉ®ÁΩ≤Âà∞ÂÖçË¥πÁöÑ HuggingFace Spaces Âπ≥Âè∞„ÄÇ

Â¶ÇÊûú‰Ω†‰ª•ÂâçÊ≤°Êúâ‰ΩøÁî®Ëøá SpacesÔºåËØ∑ÊåâÁÖß‰πãÂâçÁöÑÊåáÂçó[ËøôÈáå](/using_hugging_face_integrations)„ÄÇ

## ÁªìËÆ∫ üéâ

‰Ω†Â∑≤ÁªèÂÆåÊàê‰∫ÜÔºÅËøôÊòØÊûÑÂª∫Âú∞ÂõæÊºîÁ§∫ÊâÄÈúÄÁöÑÊâÄÊúâ‰ª£Á†Å„ÄÇ

ÈìæÊé•Âà∞ÊºîÁ§∫Ôºö[Âú∞ÂõæÊºîÁ§∫](https://huggingface.co/spaces/gradio/map_airbnb)Âíå[ÂÆåÊï¥‰ª£Á†Å](https://huggingface.co/spaces/gradio/map_airbnb/blob/main/run.py)ÔºàÂú® Hugging Face SpacesÔºâ",[],[],,1
58,9.0,"SE-ResNet

**SE ResNet** is a variant of a [ResNet](https://www.paperswithcode.com/method/resnet) that employs [squeeze-and-excitation blocks](https://paperswithcode.com/method/squeeze-and-excitation-block) to enable the network to perform dynamic channel-wise feature recalibration.

## How do I use this model on an image?

To load a pretrained model:

```py
>>> import timm
>>> model = timm.create_model('seresnet152d', pretrained=True)
>>> model.eval()","[{'entity_group': 'ORG', 'score': 0.51193076, 'word': 'SE', 'start': 0, 'end': 2}, {'entity_group': 'ORG', 'score': 0.76626575, 'word': 'Res', 'start': 3, 'end': 6}, {'entity_group': 'MISC', 'score': 0.46620825, 'word': '##Net', 'start': 6, 'end': 9}, {'entity_group': 'ORG', 'score': 0.7054931, 'word': 'Res', 'start': 16, 'end': 19}, {'entity_group': 'MISC', 'score': 0.5598473, 'word': '##Net', 'start': 19, 'end': 22}, {'entity_group': 'ORG', 'score': 0.5286178, 'word': 'Res', 'start': 44, 'end': 47}, {'entity_group': 'MISC', 'score': 0.68393236, 'word': '##Net', 'start': 47, 'end': 50}]",[],SE Res ##Net Res ##Net Res ##Net,1
59,9.0,"```

To load and preprocess the image:

```py 
>>> import urllib
>>> from PIL import Image
>>> from timm.data import resolve_data_config
>>> from timm.data.transforms_factory import create_transform

>>> config = resolve_data_config({}, model=model)
>>> transform = create_transform(**config)

>>> url, filename = (""https://github.com/pytorch/hub/raw/master/images/dog.jpg"", ""dog.jpg"")
>>> urllib.request.urlretrieve(url, filename)
>>> img = Image.open(filename).convert('RGB')
>>> tensor = transform(img).unsqueeze(0) # transform and add batch dimension
```

To get the model predictions:

```py
>>> import torch
>>> with torch.no_grad():
...     out = model(tensor)
>>> probabilities = torch.nn.functional.softmax(out[0], dim=0)
>>> print(probabilities.shape)
>>> # prints: torch.Size([1000])","[{'entity_group': 'ORG', 'score': 0.8820946, 'word': 'PIL', 'start': 74, 'end': 77}]","[{'entity_group': 'ORG', 'score': 0.8820946, 'word': 'PIL', 'start': 74, 'end': 77}]",PIL,1
60,9.0,"```

To get the top-5 predictions class names:

```py
>>> # Get imagenet class mappings
>>> url, filename = (""https://raw.githubusercontent.com/pytorch/hub/master/imagenet_classes.txt"", ""imagenet_classes.txt"")
>>> urllib.request.urlretrieve(url, filename) 
>>> with open(""imagenet_classes.txt"", ""r"") as f:
...     categories = [s.strip() for s in f.readlines()]

>>> # Print top categories per image
>>> top5_prob, top5_catid = torch.topk(probabilities, 5)
>>> for i in range(top5_prob.size(0)):
...     print(categories[top5_catid[i]], top5_prob[i].item())
>>> # prints class names and probabilities like:
>>> # [('Samoyed', 0.6425196528434753), ('Pomeranian', 0.04062102362513542), ('keeshond', 0.03186424449086189), ('white wolf', 0.01739676296710968), ('Eskimo dog', 0.011717947199940681)]","[{'entity_group': 'ORG', 'score': 0.4575165, 'word': '##yt', 'start': 145, 'end': 147}, {'entity_group': 'MISC', 'score': 0.6660246, 'word': 'Samoyed', 'start': 616, 'end': 623}, {'entity_group': 'MISC', 'score': 0.9549509, 'word': 'Pomeranian', 'start': 649, 'end': 659}, {'entity_group': 'MISC', 'score': 0.9684439, 'word': 'Eskimo', 'start': 758, 'end': 764}]","[{'entity_group': 'MISC', 'score': 0.9549509, 'word': 'Pomeranian', 'start': 649, 'end': 659}, {'entity_group': 'MISC', 'score': 0.9684439, 'word': 'Eskimo', 'start': 758, 'end': 764}]",##yt Samoyed Pomeranian Eskimo,1
61,9.0,"```

Replace the model name with the variant you want to use, e.g. `seresnet152d`. You can find the IDs in the model summaries at the top of this page.

To extract image features with this model, follow the [timm feature extraction examples](../feature_extraction), just change the name of the model you want to use.

## How do I finetune this model?

You can finetune any of the pre-trained models just by changing the classifier (the last layer).

```py
>>> model = timm.create_model('seresnet152d', pretrained=True, num_classes=NUM_FINETUNE_CLASSES)",[],[],,1
62,9.0,"```
To finetune on your own dataset, you have to write a training loop or adapt [timm's training
script](https://github.com/rwightman/pytorch-image-models/blob/master/train.py) to use your dataset.

## How do I train this model?

You can follow the [timm recipe scripts](../scripts) for training a new model afresh.

## Citation

```BibTeX
@misc{hu2019squeezeandexcitation,
      title={Squeeze-and-Excitation Networks}, 
      author={Jie Hu and Li Shen and Samuel Albanie and Gang Sun and Enhua Wu},
      year={2019},
      eprint={1709.01507},
      archivePrefix={arXiv},
      primaryClass={cs.CV}
}","[{'entity_group': 'ORG', 'score': 0.84270906, 'word': 'Squeeze - and - Excitation Networks', 'start': 387, 'end': 418}, {'entity_group': 'PER', 'score': 0.99631935, 'word': 'Jie Hu', 'start': 436, 'end': 442}, {'entity_group': 'PER', 'score': 0.9906276, 'word': 'Li Shen', 'start': 447, 'end': 454}, {'entity_group': 'PER', 'score': 0.998518, 'word': 'Samuel Albanie', 'start': 459, 'end': 473}, {'entity_group': 'PER', 'score': 0.9947185, 'word': 'Gang Sun', 'start': 478, 'end': 486}, {'entity_group': 'PER', 'score': 0.9980957, 'word': 'Enhua Wu', 'start': 491, 'end': 499}]","[{'entity_group': 'ORG', 'score': 0.84270906, 'word': 'Squeeze - and - Excitation Networks', 'start': 387, 'end': 418}, {'entity_group': 'PER', 'score': 0.99631935, 'word': 'Jie Hu', 'start': 436, 'end': 442}, {'entity_group': 'PER', 'score': 0.9906276, 'word': 'Li Shen', 'start': 447, 'end': 454}, {'entity_group': 'PER', 'score': 0.998518, 'word': 'Samuel Albanie', 'start': 459, 'end': 473}, {'entity_group': 'PER', 'score': 0.9947185, 'word': 'Gang Sun', 'start': 478, 'end': 486}, {'entity_group': 'PER', 'score': 0.9980957, 'word': 'Enhua Wu', 'start': 491, 'end': 499}]",Squeeze - and - Excitation Networks Jie Hu Li Shen Samuel Albanie Gang Sun Enhua Wu,1
63,9.0,```,"[{'entity_group': 'PER', 'score': 0.432245, 'word': '`', 'start': 0, 'end': 1}, {'entity_group': 'PER', 'score': 0.43227682, 'word': '`', 'start': 1, 'end': 2}, {'entity_group': 'PER', 'score': 0.43234676, 'word': '`', 'start': 2, 'end': 3}]",[],` ` `,1
64,9.0,"<!--
Type: model-index
Collections:
- Name: SE ResNet
  Paper:
    Title: Squeeze-and-Excitation Networks
    URL: https://paperswithcode.com/paper/squeeze-and-excitation-networks
Models:
- Name: seresnet152d
  In Collection: SE ResNet
  Metadata:
    FLOPs: 20161904304
    Parameters: 66840000
    File Size: 268144497
    Architecture:
    - 1x1 Convolution
    - Batch Normalization
    - Bottleneck Residual Block
    - Convolution
    - Global Average Pooling
    - Max Pooling
    - ReLU
    - Residual Block
    - Residual Connection
    - Softmax
    - Squeeze-and-Excitation Block
    Tasks:
    - Image Classification
    Training Techniques:
    - Label Smoothing
    - SGD with Momentum
    - Weight Decay
    Training Data:
    - ImageNet
    Training Resources: 8x NVIDIA Titan X GPUs
    ID: seresnet152d
    LR: 0.6
    Epochs: 100
    Layers: 152
    Dropout: 0.2
    Crop Pct: '0.94'
    Momentum: 0.9
    Batch Size: 1024
    Image Size: '256'
    Interpolation: bicubic","[{'entity_group': 'ORG', 'score': 0.9558917, 'word': 'SE ResNet', 'start': 44, 'end': 53}, {'entity_group': 'MISC', 'score': 0.55577666, 'word': 'S', 'start': 74, 'end': 75}, {'entity_group': 'MISC', 'score': 0.56342167, 'word': 'Ex', 'start': 86, 'end': 88}, {'entity_group': 'ORG', 'score': 0.9769514, 'word': 'SE ResNet', 'start': 226, 'end': 235}, {'entity_group': 'ORG', 'score': 0.8746778, 'word': 'ImageNet', 'start': 744, 'end': 752}, {'entity_group': 'MISC', 'score': 0.9213882, 'word': 'NVIDIA Titan X', 'start': 780, 'end': 794}]","[{'entity_group': 'ORG', 'score': 0.9558917, 'word': 'SE ResNet', 'start': 44, 'end': 53}, {'entity_group': 'ORG', 'score': 0.9769514, 'word': 'SE ResNet', 'start': 226, 'end': 235}, {'entity_group': 'ORG', 'score': 0.8746778, 'word': 'ImageNet', 'start': 744, 'end': 752}, {'entity_group': 'MISC', 'score': 0.9213882, 'word': 'NVIDIA Titan X', 'start': 780, 'end': 794}]",SE ResNet S Ex SE ResNet ImageNet NVIDIA Titan X,4
65,9.0,"Momentum: 0.9
    Batch Size: 1024
    Image Size: '256'
    Interpolation: bicubic
  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1206
  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet152d_ra2-04464dd2.pth
  Results:
  - Task: Image Classification
    Dataset: ImageNet
    Metrics:
      Top 1 Accuracy: 83.74%
      Top 5 Accuracy: 96.77%
- Name: seresnet50
  In Collection: SE ResNet
  Metadata:
    FLOPs: 5285062320
    Parameters: 28090000
    File Size: 112621903
    Architecture:
    - 1x1 Convolution
    - Batch Normalization
    - Bottleneck Residual Block
    - Convolution
    - Global Average Pooling
    - Max Pooling
    - ReLU
    - Residual Block
    - Residual Connection
    - Softmax
    - Squeeze-and-Excitation Block
    Tasks:
    - Image Classification
    Training Techniques:
    - Label Smoothing
    - SGD with Momentum","[{'entity_group': 'ORG', 'score': 0.53754485, 'word': 'gith', 'start': 100, 'end': 104}, {'entity_group': 'ORG', 'score': 0.6253414, 'word': 'ImageNet', 'start': 393, 'end': 401}, {'entity_group': 'ORG', 'score': 0.8713907, 'word': 'SE ResNet', 'start': 509, 'end': 518}, {'entity_group': 'ORG', 'score': 0.67785096, 'word': 'S', 'start': 964, 'end': 965}]","[{'entity_group': 'ORG', 'score': 0.8713907, 'word': 'SE ResNet', 'start': 509, 'end': 518}]",gith ImageNet SE ResNet S,4
66,9.0,"- Image Classification
    Training Techniques:
    - Label Smoothing
    - SGD with Momentum
    - Weight Decay
    Training Data:
    - ImageNet
    Training Resources: 8x NVIDIA Titan X GPUs
    ID: seresnet50
    LR: 0.6
    Epochs: 100
    Layers: 50
    Dropout: 0.2
    Crop Pct: '0.875'
    Momentum: 0.9
    Batch Size: 1024
    Image Size: '224'
    Interpolation: bicubic
  Code: https://github.com/rwightman/pytorch-image-models/blob/a7f95818e44b281137503bcf4b3e3e94d8ffa52f/timm/models/resnet.py#L1180
  Weights: https://github.com/rwightman/pytorch-image-models/releases/download/v0.1-weights/seresnet50_ra_224-8efdb4bb.pth
  Results:
  - Task: Image Classification
    Dataset: ImageNet
    Metrics:
      Top 1 Accuracy: 80.26%
      Top 5 Accuracy: 95.07%
-->","[{'entity_group': 'ORG', 'score': 0.8469721, 'word': 'S', 'start': 76, 'end': 77}, {'entity_group': 'ORG', 'score': 0.8356724, 'word': 'ImageNet', 'start': 138, 'end': 146}, {'entity_group': 'MISC', 'score': 0.9551342, 'word': 'NVIDIA Titan X', 'start': 174, 'end': 188}, {'entity_group': 'ORG', 'score': 0.8274633, 'word': 'ImageNet', 'start': 693, 'end': 701}]","[{'entity_group': 'ORG', 'score': 0.8469721, 'word': 'S', 'start': 76, 'end': 77}, {'entity_group': 'ORG', 'score': 0.8356724, 'word': 'ImageNet', 'start': 138, 'end': 146}, {'entity_group': 'MISC', 'score': 0.9551342, 'word': 'NVIDIA Titan X', 'start': 174, 'end': 188}, {'entity_group': 'ORG', 'score': 0.8274633, 'word': 'ImageNet', 'start': 693, 'end': 701}]",S ImageNet NVIDIA Titan X ImageNet,1
